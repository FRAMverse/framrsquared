[{"path":"https://framverse.github.io/framrsquared/LICENSE.html","id":null,"dir":"","previous_headings":"","what":"MIT License","title":"MIT License","text":"Copyright (c) 2024 framrsquared authors Permission hereby granted, free charge, person obtaining copy software associated documentation files (“Software”), deal Software without restriction, including without limitation rights use, copy, modify, merge, publish, distribute, sublicense, /sell copies Software, permit persons Software furnished , subject following conditions: copyright notice permission notice shall included copies substantial portions Software. SOFTWARE PROVIDED “”, WITHOUT WARRANTY KIND, EXPRESS IMPLIED, INCLUDING LIMITED WARRANTIES MERCHANTABILITY, FITNESS PARTICULAR PURPOSE NONINFRINGEMENT. EVENT SHALL AUTHORS COPYRIGHT HOLDERS LIABLE CLAIM, DAMAGES LIABILITY, WHETHER ACTION CONTRACT, TORT OTHERWISE, ARISING , CONNECTION SOFTWARE USE DEALINGS SOFTWARE.","code":""},{"path":"https://framverse.github.io/framrsquared/articles/auditing_tools.html","id":"auditing-tools","dir":"Articles","previous_headings":"","what":"Auditing Tools","title":"auditing_tools","text":"built series functions framrsquared compare two runs identify differences; can useful QAQC. Input specific: compare_fishery_inputs() compares fishery inputs compare_fishery_input_flags() variant compare flags compare_recruits() compares recruits two runs compare_non_retention_inputs() compares non-retention inputs compare_non_retention_input_flags() variant compare flags compare_stock_fishery_rate_scalers() compares stock fishery rate scalers Reporting console: compare_runs() Generates report console outputs functions FRAM development QAQC compare_databases() compares relevant tables two FRAM databases generates diagnostics list differences magnitude. can used developing modifications FRAM software: running original version software modified version software runs two initially identical databases, compare_databases() identify outputs affected modifications FRAM software.","code":""},{"path":"https://framverse.github.io/framrsquared/articles/auditing_tools.html","id":"example","dir":"Articles","previous_headings":"","what":"Example","title":"auditing_tools","text":"commonly use compare_runs() NOF process developing new run confirm intended changes database.","code":"fram_db <- connect_fram_db('<path_to_coho_database>')  fram_db |>     compare_runs(c(56:57))  ── Comparing run bc-Coho2423_STT_NOF to bc-Coho2424_NOF ───────────────────────────────────────────────────────────────────────────────── ℹ bc-Coho2423_STT_NOF was run at 2024-04-09 10:41:30 PM, bc-Coho2424_NOF was run at 2024-04-10 12:40:07 PM  ── Non-Retention Inputs ──  ── Checking for changes in non-retention flagging  ℹ Changes detected in non-retention flagging, below is a table outlining them # A tibble: 4 × 5   fishery_id time_step fishery_name `bc-Coho2423_STT_NOF` `bc-Coho2424_NOF`        <int>     <int> <chr>                        <int>             <int> 1        154         4 1212BNetTR                       1                NA 2         36         4 Area2TrlTR                      NA                 1 3         39         4 Area3TrlTR                      NA                 1 4         43         4 A4/4BTrlTR                      NA                 1  ── Checking for changes in non-retention inputs  ℹ Changes detected in non-retention inputs, below is a table outlining them # A tibble: 7 × 6   fishery_id time_step name       fishery_name `bc-Coho2423_STT_NOF` `bc-Coho2424_NOF`        <int>     <int> <chr>      <chr>                        <dbl>             <dbl> 1        154         3 cnr_input1 1212BNetTR                    71.4              36.7 2        154         4 cnr_input1 1212BNetTR                    28.4               0   3        154         5 cnr_input1 1212BNetTR                     7                 8   4        156         5 cnr_input1 A9-9ANetTR                    15                18   5         36         4 cnr_input1 Area2TrlTR                     0                52   6         39         4 cnr_input1 Area3TrlTR                     0                52   7         43         4 cnr_input1 A4/4BTrlTR                     0                52    ── Recruit Inputs ──  ── Checking for changes to recruits  ✔ No changes detected in recruit inputs  ── Fishery Inputs ──  ── Checking for changes to fishery flags  ✔ No changes detected in fishery flag inputs  ── Checking for changes to fishery inputs  ℹ Detection tolerance set to: 1% ℹ Changes detected in fishery inputs, below is a table outlining them # A tibble: 12 × 6    fishery_id fishery_name time_step name  `bc-Coho2423_STT_NOF` `bc-Coho2424_NOF`         <int> <chr>            <int> <chr>                 <dbl>             <dbl>  1         47 WlpaBT Net           4 quota                 26427             25411  2         48 GryHbr Spt           4 quota                  2489              2285  3         49 SGryHb Spt           5 quota                    79                73  4         50 GryHbr Net           5 quota                  5873              4751  5         51 Hump R Spt           5 quota                  1551              1505  6         52 LwCheh Net           5 quota                 24219             26299  7         54 Chehal Spt           5 quota                 14723             14553  8         55 Hump R Net           5 quota                  4485              4372  9         56 UpCheh Net           5 quota                  4267              3844 10         63 Quin R Net           4 quota                 10166              9860 11         68 Queets Net           4 quota                  7486              8079 12         68 Queets Net           5 quota                  2358               170  ── Checking for changes to stock fishery rate scalers  ✔ No changes detected in fishery inputs"},{"path":"https://framverse.github.io/framrsquared/articles/framrsquared.html","id":"connecting-to-a-fram-database","dir":"Articles","previous_headings":"","what":"Connecting to a FRAM database","title":"framrsquared","text":"","code":"library(framrsquared)  fram_db <- connect_fram_db(\"<path_to_database>\")  ✔ Successfully connected to FRAM database Database Species: COHO Run Count:  34 Last Run Date:  Wed, April 10, 2024 05:42 PM Last Run Name:  bc-Coho2425 Last Modify Date:  Wed, April 10, 2024 05:41 PM"},{"path":"https://framverse.github.io/framrsquared/articles/framrsquared.html","id":"importing-fram-tables-into-r","dir":"Articles","previous_headings":"","what":"Importing FRAM tables into R","title":"framrsquared","text":"Imported tables FRAM database automatically converted tibbles column names converted snakecase.","code":"time_step <- fram_db |>    fetch_table('TimeStep')  time_step  # A tibble: 9 × 5   species version_number time_step_id time_step_name time_step_title      <chr>            <int>        <int> <chr>          <chr>              1 COHO                 1            1 Jan-Jun        January - June     2 COHO                 1            2 July           July               3 COHO                 1            3 August         August             4 COHO                 1            4 Septmbr        September          5 COHO                 1            5 Oct-Dec        October - December 6 CHINOOK              1            1 Oct-Apr-1      October-April-1    7 CHINOOK              1            2 May-June       May - June         8 CHINOOK              1            3 July-Sept      July - September   9 CHINOOK              1            4 Oct-Apr-2      October-April-2"},{"path":"https://framverse.github.io/framrsquared/articles/framrsquared.html","id":"dynamic-and-additive-fisheries-filtering","dir":"Articles","previous_headings":"","what":"Dynamic and Additive Fisheries Filtering","title":"framrsquared","text":"Filtering functions package agnostic species designed retain syntax Chinook FRAM databases coho FRAM databases. State level filters: filter_wa() Filters fisheries Washington filter_bc() Filters fisheries Canada filter_ca() Filters fisheries California filter_or() Filters fisheries Oregon filter_or() Filters fisheries Alaska Gear level filters: filter_net() Filters net fisheries filter_sport() Filters sport fisheries Regional level filters: filter_marine() Filters marine fisheries filter_coast() Filters coastal fisheries filter_puget_sound() Filters Puget Sound Fisheries","code":""},{"path":"https://framverse.github.io/framrsquared/articles/framrsquared.html","id":"example-use-case","dir":"Articles","previous_headings":"","what":"Example use case","title":"framrsquared","text":"use tools identify marine puget sound sport fisheries Coho database chinook database.","code":"# coho database fram_db_coho <- connect_fram_db('<path_to_coho_database>')  fram_db_coho |>    fetch_table('Fishery') |>   filter_marine() |>   filter_puget_sound() |>   filter_sport()    # A tibble: 10 × 5    species version_number fishery_id fishery_name fishery_title                         <chr>            <int>      <int> <chr>        <chr>                               1 COHO                 1         91 Area 5 Spt   WA Area 5 Sport (Sekiu)             2 COHO                 1         92 Area 6 Spt   WA Area 6 Sport (Port Angeles)      3 COHO                 1         93 Area 7 Spt   WA Area 7 Sport (San Juan Islands)  4 COHO                 1        106 Ar 8-1 Spt   WA Area 8.1 Sport (Skagit Bay)      5 COHO                 1        107 Area 9 Spt   WA Area 9 Sport (Admirality Inlet)  6 COHO                 1        115 Ar 8-2 Spt   WA Area 8.2 Sport (Everett)         7 COHO                 1        118 Ar 10  Spt   WA Area 10 Sport (Seattle)          8 COHO                 1        129 Ar 11  Spt   WA Area 11 Sport (Tacoma)           9 COHO                 1        136 Ar 13  Spt   WAArea 13 Marine Sport             10 COHO                 1        152 Ar 12  Spt   Area 12 Marine Sport     # chinook database fram_db_chinook <- connect_fram_db('<path_to_chinook_database>')  fram_db_chinook |>    fetch_table('Fishery') |>   filter_marine() |>   filter_puget_sound() |>   filter_sport()  # A tibble: 12 × 5    species version_number fishery_id fishery_name fishery_title        <chr>            <int>      <int> <chr>        <chr>              1 CHINOOK              1         56 A 10 Sport   NT Area 10 Sport   2 CHINOOK              1         57 A 11 Sport   NT Area 11 Sport   3 CHINOOK              1         60 A 10A Sprt   NT Area 10A Sport  4 CHINOOK              1         62 A 10E Sprt   NT Area 10E Sport  5 CHINOOK              1         64 A 12 Sport   NT Area 12 Sport   6 CHINOOK              1         67 A 13 Sport   NT Area 13 Sport   7 CHINOOK              1         36 Ar 7 Sport   NT Area 7 Sport    8 CHINOOK              1         42 Ar 5 Sport   NT Area 5 Sport    9 CHINOOK              1         45 Ar 8-1 Spt   NT Area 8-1 Sport 10 CHINOOK              1         48 Area8D Spt   NT Area 8D Sport  11 CHINOOK              1         53 Ar 9 Sport   NT Area 9 Sport   12 CHINOOK              1         54 Ar 6 Sport   NT Area 6 Sport    # disconnect databases disconnect_fram_db(fram_db_coho) ✔ Successfully disconnected from FRAM database (fram_db_coho)  disconnect_fram_db(fram_db_chinook) ✔ Successfully disconnected from FRAM database (fram_db_chinook)"},{"path":"https://framverse.github.io/framrsquared/authors.html","id":null,"dir":"","previous_headings":"","what":"Authors","title":"Authors and Citation","text":"Ty Garber. Maintainer, author. Collin Edwards. Author.","code":""},{"path":"https://framverse.github.io/framrsquared/authors.html","id":"citation","dir":"","previous_headings":"","what":"Citation","title":"Authors and Citation","text":"Garber T, Edwards C (2025). framrsquared: FRAM Database Interface. R package version 0.6.0, https://framverse.github.io/framrsquared/.","code":"@Manual{,   title = {framrsquared: FRAM Database Interface},   author = {Ty Garber and Collin Edwards},   year = {2025},   note = {R package version 0.6.0},   url = {https://framverse.github.io/framrsquared/}, }"},{"path":[]},{"path":"https://framverse.github.io/framrsquared/index.html","id":"overview","dir":"","previous_headings":"","what":"Overview","title":"FRAM Database Interface","text":"framrsquared library focus easing burden working FRAM database providing convenient methods import tables R, producing similar analyses FRAM executable extending circumstances. framrsquared part FRAMverse R-Universe.","code":""},{"path":"https://framverse.github.io/framrsquared/index.html","id":"installation","dir":"","previous_headings":"","what":"Installation","title":"FRAM Database Interface","text":"framrsquared can installed R-Universe: Otherwise, Rtools devtools remotes packages installed, framrsquared can installed source code:","code":"install.packages(\"framrsquared\", repos = \"https://framverse.r-universe.dev\") devtools::install_github(\"FRAMverse/framrsquared\")  # Alternatively  remotes::install_github(\"FRAMverse/framrsquared\")"},{"path":"https://framverse.github.io/framrsquared/reference/NR_flag_translate.html","id":null,"dir":"Reference","previous_headings":"","what":"Provides English translation of numeric non-retention flags — NR_flag_translate","title":"Provides English translation of numeric non-retention flags — NR_flag_translate","text":"Provides English translation numeric non-retention flags","code":""},{"path":"https://framverse.github.io/framrsquared/reference/NR_flag_translate.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Provides English translation of numeric non-retention flags — NR_flag_translate","text":"","code":"NR_flag_translate(vec)"},{"path":"https://framverse.github.io/framrsquared/reference/NR_flag_translate.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Provides English translation of numeric non-retention flags — NR_flag_translate","text":"vec vector flags","code":""},{"path":"https://framverse.github.io/framrsquared/reference/NR_flag_translate.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Provides English translation of numeric non-retention flags — NR_flag_translate","text":"","code":"if (FALSE) NR_flag_translate(sample(1:4, 10, replace = T)) # \\dontrun{}"},{"path":"https://framverse.github.io/framrsquared/reference/add_flag_text.html","id":null,"dir":"Reference","previous_headings":"","what":"Adds a column with a text version of flags for either non-retention or fishery scalers — add_flag_text","title":"Adds a column with a text version of flags for either non-retention or fishery scalers — add_flag_text","text":"Adds column text version flags either non-retention fishery scalers","code":""},{"path":"https://framverse.github.io/framrsquared/reference/add_flag_text.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Adds a column with a text version of flags for either non-retention or fishery scalers — add_flag_text","text":"","code":"add_flag_text(.data)"},{"path":"https://framverse.github.io/framrsquared/reference/add_flag_text.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Adds a column with a text version of flags for either non-retention or fishery scalers — add_flag_text","text":".data fetched FisheryScalers NonRetentions","code":""},{"path":"https://framverse.github.io/framrsquared/reference/add_flag_text.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Adds a column with a text version of flags for either non-retention or fishery scalers — add_flag_text","text":"","code":"if (FALSE)  mortality_table |> add_flag_text() # \\dontrun{}"},{"path":"https://framverse.github.io/framrsquared/reference/addstock_check.html","id":null,"dir":"Reference","previous_headings":"","what":"Check FRAM database after adding new stock — addstock_check","title":"Check FRAM database after adding new stock — addstock_check","text":"Either provides step step process adding new stock FRAM database, walks fram database run checks tables potential errors associated adding new stock.","code":""},{"path":"https://framverse.github.io/framrsquared/reference/addstock_check.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Check FRAM database after adding new stock — addstock_check","text":"","code":"addstock_check(   file_name = NULL,   run_id = NULL,   old_stockcount = 78,   override_db_checks = FALSE )"},{"path":"https://framverse.github.io/framrsquared/reference/addstock_check.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Check FRAM database after adding new stock — addstock_check","text":"file_name filepath database. NULL, provide summary process instead. Default = NULL. run_id RunID associated new stock FRAM database. left NULL, provide summary process instead. Default = NULL. old_stockcount number stocks previously present treat \"baseline\" – several checking steps focus solely newly added stocks. Defaults 78. override_db_checks Ignore species, database type. FALSE, function stop database Chinook transfer file. Defaults FALSE.","code":""},{"path":"https://framverse.github.io/framrsquared/reference/addstock_check.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Check FRAM database after adding new stock — addstock_check","text":"","code":"if (FALSE) { # \\dontrun{ ## review process addstock_check() ## check database for additional stock addstock_check(\"2024 Pre-Season Chinook DB - first test.mdb\", run_id = 138) } # }"},{"path":"https://framverse.github.io/framrsquared/reference/aeq_mortality.html","id":null,"dir":"Reference","previous_headings":"","what":"Extract AEQ mortality from Chinook FRAM database. Refactored and stripped down from the framr package written by Dan Auerbach. https://github.com/FRAMverse/framr/ — aeq_mortality","title":"Extract AEQ mortality from Chinook FRAM database. Refactored and stripped down from the framr package written by Dan Auerbach. https://github.com/FRAMverse/framr/ — aeq_mortality","text":"Extract AEQ mortality Chinook FRAM database. Refactored stripped framr package written Dan Auerbach. https://github.com/FRAMverse/framr/","code":""},{"path":"https://framverse.github.io/framrsquared/reference/aeq_mortality.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Extract AEQ mortality from Chinook FRAM database. Refactored and stripped down from the framr package written by Dan Auerbach. https://github.com/FRAMverse/framr/ — aeq_mortality","text":"","code":"aeq_mortality(fram_db, run_id = NULL, msp = TRUE)"},{"path":"https://framverse.github.io/framrsquared/reference/aeq_mortality.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Extract AEQ mortality from Chinook FRAM database. Refactored and stripped down from the framr package written by Dan Auerbach. https://github.com/FRAMverse/framr/ — aeq_mortality","text":"fram_db Fram database object run_id numeric, RunID(s) ID ID:ID msp use MSP expansion? Logical, default true.","code":""},{"path":"https://framverse.github.io/framrsquared/reference/aeq_mortality.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Extract AEQ mortality from Chinook FRAM database. Refactored and stripped down from the framr package written by Dan Auerbach. https://github.com/FRAMverse/framr/ — aeq_mortality","text":"","code":"if (FALSE) { # \\dontrun{ fram_db |> aeq_mortality(run_id = 132) } # }"},{"path":"https://framverse.github.io/framrsquared/reference/bkfram_checks_coho.html","id":null,"dir":"Reference","previous_headings":"","what":"Performs error checks of a backwards FRAM run Returns nested tibble with diagnostics — bkfram_checks_coho","title":"Performs error checks of a backwards FRAM run Returns nested tibble with diagnostics — bkfram_checks_coho","text":"Performs error checks backwards FRAM run Returns nested tibble diagnostics","code":""},{"path":"https://framverse.github.io/framrsquared/reference/bkfram_checks_coho.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Performs error checks of a backwards FRAM run Returns nested tibble with diagnostics — bkfram_checks_coho","text":"","code":"bkfram_checks_coho(fram_db, backward_run_id = NULL, forward_run_id = NULL)"},{"path":"https://framverse.github.io/framrsquared/reference/bkfram_checks_coho.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Performs error checks of a backwards FRAM run Returns nested tibble with diagnostics — bkfram_checks_coho","text":"fram_db fram database object, supplied connect_fram_db backward_run_id numeric, RunID forward_run_id numeric, RunID","code":""},{"path":"https://framverse.github.io/framrsquared/reference/bkfram_checks_coho.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Performs error checks of a backwards FRAM run Returns nested tibble with diagnostics — bkfram_checks_coho","text":"","code":"if (FALSE) { # \\dontrun{ fram_db |> bkfram_checks_coho(backward_run_id = 132, forward_run_id = 133) } # }"},{"path":"https://framverse.github.io/framrsquared/reference/change_run_id.html","id":null,"dir":"Reference","previous_headings":"","what":"Changes a run's ID number in a FRAM database — change_run_id","title":"Changes a run's ID number in a FRAM database — change_run_id","text":"Changes run's ID number FRAM database","code":""},{"path":"https://framverse.github.io/framrsquared/reference/change_run_id.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Changes a run's ID number in a FRAM database — change_run_id","text":"","code":"change_run_id(fram_db, old_run_id, new_run_id)"},{"path":"https://framverse.github.io/framrsquared/reference/change_run_id.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Changes a run's ID number in a FRAM database — change_run_id","text":"fram_db FRAM database object old_run_id FRAM run ID changed new_run_id New FRAM run ID","code":""},{"path":"https://framverse.github.io/framrsquared/reference/change_run_id.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Changes a run's ID number in a FRAM database — change_run_id","text":"","code":"if (FALSE) fram_db |> change_run_id(old_run_id = 132, new_run_id = 300) # \\dontrun{}"},{"path":"https://framverse.github.io/framrsquared/reference/coho_mark_rates.html","id":null,"dir":"Reference","previous_headings":"","what":" Returns a tibble displaying predicted FRAMencounter mark rates by fishery, fishery type, and time-step. — coho_mark_rates","title":" Returns a tibble displaying predicted FRAMencounter mark rates by fishery, fishery type, and time-step. — coho_mark_rates","text":"Returns tibble displaying predicted FRAMencounter mark rates fishery, fishery type, time-step.","code":""},{"path":"https://framverse.github.io/framrsquared/reference/coho_mark_rates.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":" Returns a tibble displaying predicted FRAMencounter mark rates by fishery, fishery type, and time-step. — coho_mark_rates","text":"","code":"coho_mark_rates(fram_db, run_id = NULL)"},{"path":"https://framverse.github.io/framrsquared/reference/coho_mark_rates.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":" Returns a tibble displaying predicted FRAMencounter mark rates by fishery, fishery type, and time-step. — coho_mark_rates","text":"fram_db FRAM database object run_id Run ID (optional)","code":""},{"path":"https://framverse.github.io/framrsquared/reference/coho_mark_rates.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":" Returns a tibble displaying predicted FRAMencounter mark rates by fishery, fishery type, and time-step. — coho_mark_rates","text":"","code":"if (FALSE) { # \\dontrun{ fram_db |> coho_mark_rates(run_id) } # }"},{"path":"https://framverse.github.io/framrsquared/reference/cohort_abundance.html","id":null,"dir":"Reference","previous_headings":"","what":" Pulls the starting cohorts from the database, this is stored in the StockRecruit table, but can be wrong. It's best just to multiply the Stock Recruit Scalar by the base period abundance — cohort_abundance","title":" Pulls the starting cohorts from the database, this is stored in the StockRecruit table, but can be wrong. It's best just to multiply the Stock Recruit Scalar by the base period abundance — cohort_abundance","text":"Pulls starting cohorts database, stored StockRecruit table, can wrong. best just multiply Stock Recruit Scalar base period abundance","code":""},{"path":"https://framverse.github.io/framrsquared/reference/cohort_abundance.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":" Pulls the starting cohorts from the database, this is stored in the StockRecruit table, but can be wrong. It's best just to multiply the Stock Recruit Scalar by the base period abundance — cohort_abundance","text":"","code":"cohort_abundance(fram_db, run_id = NULL)"},{"path":"https://framverse.github.io/framrsquared/reference/cohort_abundance.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":" Pulls the starting cohorts from the database, this is stored in the StockRecruit table, but can be wrong. It's best just to multiply the Stock Recruit Scalar by the base period abundance — cohort_abundance","text":"fram_db FRAM database object run_id Run ID (optional)","code":""},{"path":"https://framverse.github.io/framrsquared/reference/cohort_abundance.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":" Pulls the starting cohorts from the database, this is stored in the StockRecruit table, but can be wrong. It's best just to multiply the Stock Recruit Scalar by the base period abundance — cohort_abundance","text":"","code":"if (FALSE) { # \\dontrun{ fram_db |>  cohort_abundance(run_id = 145) } # }"},{"path":"https://framverse.github.io/framrsquared/reference/compare_databases.html","id":null,"dir":"Reference","previous_headings":"","what":"Compare tables in two equivalent FRAM databases — compare_databases","title":"Compare tables in two equivalent FRAM databases — compare_databases","text":"Function supports QAQC practices comparing tables two FRAM databases identifying (quantifying) differences.","code":""},{"path":"https://framverse.github.io/framrsquared/reference/compare_databases.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Compare tables in two equivalent FRAM databases — compare_databases","text":"","code":"compare_databases(   file1,   file2,   runid_use = NULL,   tables_use = NULL,   slim = FALSE,   quiet = TRUE )"},{"path":"https://framverse.github.io/framrsquared/reference/compare_databases.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Compare tables in two equivalent FRAM databases — compare_databases","text":"file1 Character string. FRAM database contains results running baseline FRAM runs (e.g., \"production\" version). file2 Character string. FRAM database contains results running modified FRAM runs (e.g., running forked version FRAM using modified input values) runid_use Numeric vector run_ids compare. Optional. provided, compare run ids databases. tables_use Vector character strings. Optional. provided, compare listed tables. slim Logical. Optional, defaults FALSE. TRUE, include $tabs_file1 $tabs_file2 output list. quiet Logical, defaults TRUE. TRUE, suppress messages showing individual steps.","code":""},{"path":"https://framverse.github.io/framrsquared/reference/compare_databases.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Compare tables in two equivalent FRAM databases — compare_databases","text":"List lists tibbles containing comparison information: $ratios tibble comparing every entry every relevant column every table. See \"Details\" column descriptions. $ratios_detailed list tibbles showing contents $ratios broken tables, additional non-compared columns present (e.g., stock_name $ratios_detailed$Stock) $nrow_tracker dataframe providing number rows table file1 ($nrow.prod), file2 ($nrow.fork), joined comparison ($nrow.comp). Useful track cause many--many join warnings can result duplicated table entries; unless duplicate entries, $nrow.comp less equal minimum $nrow.prod $nrow.fork. $tabs_file1 List containing original fetched tables file1. returned argument slim TRUE $tabs_file2 List containing original fetched tables file2. returned argument slim TRUE.","code":""},{"path":"https://framverse.github.io/framrsquared/reference/compare_databases.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Compare tables in two equivalent FRAM databases — compare_databases","text":"key output $ratios tibble, contains every comparison relevant table entries long-form. comparisons implemented first aligning corresponding table rows using appropriate key columns (e.g. run_id, fishery_id, stock_id, age, time_step, etc). $ratios, table variable columns specify table column compared, respectively. prop.err, abs.err, scale.err provide measures changes \"original\" value (file1) \"comparison\" value (file2). . original comparison columns give actual values compared. run_id time_step specify rows compared. bkfram...fish bkfram...prop provide context comparison (). Quantifying error FRAM involves numerical solvers, expect small differences table entries even comparing two effectively equivalent databases. compare_databases() provides three metrics changes. case, assumed file1 reference file; \"error\" measures show much  value file2 changed relative corresponding value file1. simplest measure error abs.err. absolute value difference two values. looking entry table = \"Mortality\" variable = \"landed_catch\", abs.err 5 means file2 entry five fish less file1 entry. can confirm looking original comparison columns. abs.err easily interpreted, often meaningful looking across tables variables. , abs.err value 5 mean relatively meaningless change five fish landed catch entry originally thousands fish, value 5 huge change fishing effort fishery scaler entry. One way make error comparable across tables variables calculate proportional error. entry changed 0.01%, meaningful, changed 10%, . $prop.err provides proportional error, -0.5 means entry file2 50% less corresponding value file1, value 2 means entry file2 200% corresponding value file2. ' gives error context original value, often good way look problems. However, sometimes find large $prop.err values changes concerning. example, may entry landed catch mortality table 0.00001 fish file1, 0 fish file2. practicality two values identical, 0.00001 fish difference likely one random jitter numerical solver rounding differences. However, $prop.err value cell -1, extreme negative change can get. can jointly look $abs.err $prop.err address potential misleadingly large errors $prop.err, nice single error metric provides error context without sensitive small entries file1. scale.err elaboration $prop.err provides broader context. $prop.err takes absolute error scales original value file1. $scale.err generalizes idea, first calculating average error table-variable combination, scaling absolute error corresponding table-variable average. , entry landed_catch Mortality table 0.001 file1, 0.002 file2, average landed_catch entries file 1 1000, prop.err 1 (since file2 double value file1, (0.002-0.001)/0.001), scale.err 0.000001 ((0.002-0.001)/1000). better captures intuition difference 0.001 fish landed catch big deal, since values typically huge. scale.err thus measure error comparable across variables tables, essentially answer question \"entry changed lot kind variable table?\". scale.err frequently useful error metric, compare_databases() provides three. may contexts important focus proportional error. example, large proportional errors landed catch catch rare stocks can important, much larger catch stock water scale_err metric. Addressing backwardsFRAM wiggle post-season runs, backwards FRAM algorithm employed; solver stops estimated fish numbers within 1 fish target size. means potential substantial \"wiggle\" bkFRAm values comparing two databases. wiggle can propagate tables, especially stock-age-timesteps target values quite small (wiggle +/- 1 fish proportionally large amount). reason, can useful see measures error correspond errors corresponding bk fram table. every table entry makes sense (e.g., stock id, age, timestep), $bkfram...fish gives absolute error corresponding row BackwardsFram table, bkfram...prop give relative error (proportion) corresponding row BackwardsFram table. bkfram wiggle cause observed errors, expect largest errors correspond largest $bkfram...fish $bkfram...prop values. Suggestions simple plotting see original comparison values fall 1:1 line, ggplot2::geom_point() can used, $ratios$original $ratios$comparison x y, facet_wrap table (perhaps variable) make plots readable. identifying meaningful change, scale.err likely best measure error. can helpful plot scale.err bkfram...fish bkfram...prop see table entries largest error correspond stock-fishery-age-timestep largest wiggle backwards fram solutions. digging individual tables, can sometimes helpful look comparisons $ratios_detailed, contains additional columns fit standardized formatting $ratios.","code":""},{"path":"https://framverse.github.io/framrsquared/reference/compare_databases.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Compare tables in two equivalent FRAM databases — compare_databases","text":"","code":"if (FALSE) { # \\dontrun{ file1 = \"Valid2022_Round_7_1_1_11142023_REFERENCE_fixed - fork rebuild.mdb\" file2 = \"Valid2022_Round_7.1.1_11142023 - green river split.mdb\" out = tables_compare(file1, file2) } # }"},{"path":"https://framverse.github.io/framrsquared/reference/compare_fishery_input_flags.html","id":null,"dir":"Reference","previous_headings":"","what":"Compares the fishery flags of two runs — compare_fishery_input_flags","title":"Compares the fishery flags of two runs — compare_fishery_input_flags","text":"Compares fishery flags two runs","code":""},{"path":"https://framverse.github.io/framrsquared/reference/compare_fishery_input_flags.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Compares the fishery flags of two runs — compare_fishery_input_flags","text":"","code":"compare_fishery_input_flags(fram_db, run_ids, verbose = TRUE)"},{"path":"https://framverse.github.io/framrsquared/reference/compare_fishery_input_flags.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Compares the fishery flags of two runs — compare_fishery_input_flags","text":"fram_db FRAM database object run_ids Two run ids verbose TRUE, print update screen differences recruits.","code":""},{"path":"https://framverse.github.io/framrsquared/reference/compare_fishery_input_flags.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Compares the fishery flags of two runs — compare_fishery_input_flags","text":"","code":"if (FALSE) fram_db |> compare_fishery_input_flags(c(55, 56)) # \\dontrun{}"},{"path":"https://framverse.github.io/framrsquared/reference/compare_fishery_inputs.html","id":null,"dir":"Reference","previous_headings":"","what":"Compares the fishery inputs of two runs — compare_fishery_inputs","title":"Compares the fishery inputs of two runs — compare_fishery_inputs","text":"Compares fishery inputs two runs","code":""},{"path":"https://framverse.github.io/framrsquared/reference/compare_fishery_inputs.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Compares the fishery inputs of two runs — compare_fishery_inputs","text":"","code":"compare_fishery_inputs(fram_db, run_ids, tolerance = 0.01, verbose = TRUE)"},{"path":"https://framverse.github.io/framrsquared/reference/compare_fishery_inputs.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Compares the fishery inputs of two runs — compare_fishery_inputs","text":"fram_db FRAM database object run_ids Two run ids tolerance Tolerance detecting changes verbose TRUE, print update screen differences recruits.","code":""},{"path":"https://framverse.github.io/framrsquared/reference/compare_fishery_inputs.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Compares the fishery inputs of two runs — compare_fishery_inputs","text":"","code":"if (FALSE) fram_db |> compare_fishery_inputs(c(55, 56)) # \\dontrun{}"},{"path":"https://framverse.github.io/framrsquared/reference/compare_inputs.html","id":null,"dir":"Reference","previous_headings":"","what":"Generates a dataframe that compares fishery scalers table for two runs identified by run_id's — compare_inputs","title":"Generates a dataframe that compares fishery scalers table for two runs identified by run_id's — compare_inputs","text":"Generates dataframe compares fishery scalers table two runs identified run_id's","code":""},{"path":"https://framverse.github.io/framrsquared/reference/compare_inputs.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Generates a dataframe that compares fishery scalers table for two runs identified by run_id's — compare_inputs","text":"","code":"compare_inputs(fram_db, run_ids)"},{"path":"https://framverse.github.io/framrsquared/reference/compare_inputs.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Generates a dataframe that compares fishery scalers table for two runs identified by run_id's — compare_inputs","text":"fram_db FRAM database object run_ids Vector two run_ids","code":""},{"path":"https://framverse.github.io/framrsquared/reference/compare_inputs.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Generates a dataframe that compares fishery scalers table for two runs identified by run_id's — compare_inputs","text":"Data frame differences. $percentdiff = change quota (comparing appropriate quotas based fishery flags), $regulation_comparison  = change regulation (NS, MSF, NS + MSF). Columns present FisheriesScalers database included, _original _comparison suffixes identifying entries associated first second entries run_ids, respectively.","code":""},{"path":"https://framverse.github.io/framrsquared/reference/compare_inputs.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Generates a dataframe that compares fishery scalers table for two runs identified by run_id's — compare_inputs","text":"Comparisons assume first run provided baseline, provide relative changes . includes percent changes ($percent.diff)include percent changes (infinite )","code":""},{"path":"https://framverse.github.io/framrsquared/reference/compare_inputs.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Generates a dataframe that compares fishery scalers table for two runs identified by run_id's — compare_inputs","text":"","code":"if (FALSE) fram_db |> compare_inputs(c(100,101)) # \\dontrun{}"},{"path":"https://framverse.github.io/framrsquared/reference/compare_inputs_chart.html","id":null,"dir":"Reference","previous_headings":"","what":"Generates a heat map of changed between two run inputs. Can be a very busy chart if not filtered down. Consider using a filter. — compare_inputs_chart","title":"Generates a heat map of changed between two run inputs. Can be a very busy chart if not filtered down. Consider using a filter. — compare_inputs_chart","text":"Generates heat map changed two run inputs. Can busy chart filtered . Consider using filter.","code":""},{"path":"https://framverse.github.io/framrsquared/reference/compare_inputs_chart.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Generates a heat map of changed between two run inputs. Can be a very busy chart if not filtered down. Consider using a filter. — compare_inputs_chart","text":"","code":"compare_inputs_chart(.data)"},{"path":"https://framverse.github.io/framrsquared/reference/compare_inputs_chart.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Generates a heat map of changed between two run inputs. Can be a very busy chart if not filtered down. Consider using a filter. — compare_inputs_chart","text":".data Dataframe origination compare_inputs() function","code":""},{"path":"https://framverse.github.io/framrsquared/reference/compare_inputs_chart.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Generates a heat map of changed between two run inputs. Can be a very busy chart if not filtered down. Consider using a filter. — compare_inputs_chart","text":"","code":"if (FALSE) fram_db |> compare_inputs(c(100, 101)) |> compare_inputs_chart() # \\dontrun{}"},{"path":"https://framverse.github.io/framrsquared/reference/compare_non_retention_input_flags.html","id":null,"dir":"Reference","previous_headings":"","what":"Compares the non retention flags of two runs — compare_non_retention_input_flags","title":"Compares the non retention flags of two runs — compare_non_retention_input_flags","text":"Compares non retention flags two runs","code":""},{"path":"https://framverse.github.io/framrsquared/reference/compare_non_retention_input_flags.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Compares the non retention flags of two runs — compare_non_retention_input_flags","text":"","code":"compare_non_retention_input_flags(fram_db, run_ids, verbose = TRUE)"},{"path":"https://framverse.github.io/framrsquared/reference/compare_non_retention_input_flags.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Compares the non retention flags of two runs — compare_non_retention_input_flags","text":"fram_db FRAM database object run_ids Two run ids verbose TRUE, print update screen differences recruits.","code":""},{"path":"https://framverse.github.io/framrsquared/reference/compare_non_retention_input_flags.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Compares the non retention flags of two runs — compare_non_retention_input_flags","text":"","code":"if (FALSE) fram_db |> compare_non_retention_inputs(c(55, 56)) # \\dontrun{}"},{"path":"https://framverse.github.io/framrsquared/reference/compare_non_retention_inputs.html","id":null,"dir":"Reference","previous_headings":"","what":"Compares the non retention inputs of two runs — compare_non_retention_inputs","title":"Compares the non retention inputs of two runs — compare_non_retention_inputs","text":"Compares non retention inputs two runs","code":""},{"path":"https://framverse.github.io/framrsquared/reference/compare_non_retention_inputs.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Compares the non retention inputs of two runs — compare_non_retention_inputs","text":"","code":"compare_non_retention_inputs(fram_db, run_ids, verbose = TRUE)"},{"path":"https://framverse.github.io/framrsquared/reference/compare_non_retention_inputs.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Compares the non retention inputs of two runs — compare_non_retention_inputs","text":"fram_db FRAM database object run_ids Two run ids verbose TRUE, print update screen differences recruits.","code":""},{"path":"https://framverse.github.io/framrsquared/reference/compare_non_retention_inputs.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Compares the non retention inputs of two runs — compare_non_retention_inputs","text":"","code":"if (FALSE) fram_db |> compare_non_retention_inputs(c(55, 56)) # \\dontrun{}"},{"path":"https://framverse.github.io/framrsquared/reference/compare_recruits.html","id":null,"dir":"Reference","previous_headings":"","what":"Compares the recruit scalers of two runs — compare_recruits","title":"Compares the recruit scalers of two runs — compare_recruits","text":"Compares recruit scalers two runs","code":""},{"path":"https://framverse.github.io/framrsquared/reference/compare_recruits.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Compares the recruit scalers of two runs — compare_recruits","text":"","code":"compare_recruits(fram_db, run_ids, tolerance = 0.01, verbose = TRUE)"},{"path":"https://framverse.github.io/framrsquared/reference/compare_recruits.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Compares the recruit scalers of two runs — compare_recruits","text":"fram_db FRAM database object run_ids Two run ids tolerance Tolerance detecting changes verbose TRUE, print update screen differences recruits.","code":""},{"path":"https://framverse.github.io/framrsquared/reference/compare_recruits.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Compares the recruit scalers of two runs — compare_recruits","text":"","code":"if (FALSE) fram_db |> compare_recruits() # \\dontrun{}"},{"path":"https://framverse.github.io/framrsquared/reference/compare_runs.html","id":null,"dir":"Reference","previous_headings":"","what":"Generates a report to the console of changes to inputs between two runs — compare_runs","title":"Generates a report to the console of changes to inputs between two runs — compare_runs","text":"Generates report console changes inputs two runs","code":""},{"path":"https://framverse.github.io/framrsquared/reference/compare_runs.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Generates a report to the console of changes to inputs between two runs — compare_runs","text":"","code":"compare_runs(fram_db, run_ids, tolerance = 0.01)"},{"path":"https://framverse.github.io/framrsquared/reference/compare_runs.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Generates a report to the console of changes to inputs between two runs — compare_runs","text":"fram_db FRAM database object run_ids Two run ids. Run names must differ; change FRAM necessary. tolerance Tolerance detection, 1 percent default","code":""},{"path":"https://framverse.github.io/framrsquared/reference/compare_runs.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Generates a report to the console of changes to inputs between two runs — compare_runs","text":"","code":"if (FALSE) fram_db |> compare_runs(c(55, 56)) # \\dontrun{}"},{"path":"https://framverse.github.io/framrsquared/reference/compare_stock_fishery_rate_scalers.html","id":null,"dir":"Reference","previous_headings":"","what":"Compares the stock fishery rate scalers of two runs — compare_stock_fishery_rate_scalers","title":"Compares the stock fishery rate scalers of two runs — compare_stock_fishery_rate_scalers","text":"Compares stock fishery rate scalers two runs","code":""},{"path":"https://framverse.github.io/framrsquared/reference/compare_stock_fishery_rate_scalers.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Compares the stock fishery rate scalers of two runs — compare_stock_fishery_rate_scalers","text":"","code":"compare_stock_fishery_rate_scalers(fram_db, run_ids)"},{"path":"https://framverse.github.io/framrsquared/reference/compare_stock_fishery_rate_scalers.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Compares the stock fishery rate scalers of two runs — compare_stock_fishery_rate_scalers","text":"fram_db FRAM database object run_ids Two run ids","code":""},{"path":"https://framverse.github.io/framrsquared/reference/compare_stock_fishery_rate_scalers.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Compares the stock fishery rate scalers of two runs — compare_stock_fishery_rate_scalers","text":"","code":"if (FALSE) fram_db |> compare_stock_fishery_rate_scalers(c(55, 56)) # \\dontrun{}"},{"path":"https://framverse.github.io/framrsquared/reference/connect_fram_db.html","id":null,"dir":"Reference","previous_headings":"","what":"This is a connection object to a FRAM database. Returns a list used throughout the rest of this package which carries meta data. — connect_fram_db","title":"This is a connection object to a FRAM database. Returns a list used throughout the rest of this package which carries meta data. — connect_fram_db","text":"connection object FRAM database. Returns list used throughout rest package carries meta data.","code":""},{"path":"https://framverse.github.io/framrsquared/reference/connect_fram_db.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"This is a connection object to a FRAM database. Returns a list used throughout the rest of this package which carries meta data. — connect_fram_db","text":"","code":"connect_fram_db(   db_path,   enforce_type = c(\"full\", \"transfer\"),   read_only = FALSE,   quiet = FALSE )"},{"path":"https://framverse.github.io/framrsquared/reference/connect_fram_db.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"This is a connection object to a FRAM database. Returns a list used throughout the rest of this package which carries meta data. — connect_fram_db","text":"db_path Path FRAM database. enforce_type used read_only Optional argument flag connection read-(set TRUE). TRUE, framrsquared functions modify database abort rather run. Use safety feature working database must modified. quiet Logical. Optitional argument; TRUE, silences success message database summary.","code":""},{"path":"https://framverse.github.io/framrsquared/reference/connect_fram_db.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"This is a connection object to a FRAM database. Returns a list used throughout the rest of this package which carries meta data. — connect_fram_db","text":"Additional details...","code":""},{"path":"https://framverse.github.io/framrsquared/reference/connect_fram_db.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"This is a connection object to a FRAM database. Returns a list used throughout the rest of this package which carries meta data. — connect_fram_db","text":"","code":"if (FALSE) fram_db <- connect_fram_db('<path>') # \\dontrun{}"},{"path":"https://framverse.github.io/framrsquared/reference/copy_fishery_scalers.html","id":null,"dir":"Reference","previous_headings":"","what":"Experimental copying scaler inputs from one run to another DANGEROUS — copy_fishery_scalers","title":"Experimental copying scaler inputs from one run to another DANGEROUS — copy_fishery_scalers","text":"Experimental copying scaler inputs one run another DANGEROUS","code":""},{"path":"https://framverse.github.io/framrsquared/reference/copy_fishery_scalers.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Experimental copying scaler inputs from one run to another DANGEROUS — copy_fishery_scalers","text":"","code":"copy_fishery_scalers(fram_db, from_run, to_run, fishery_id = NULL)"},{"path":"https://framverse.github.io/framrsquared/reference/copy_fishery_scalers.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Experimental copying scaler inputs from one run to another DANGEROUS — copy_fishery_scalers","text":"fram_db FRAM database object from_run Run ID copied to_run Run ID copied fishery_id ID IDs specific fishery(s) copy inputs /. provided, interactive option copy inputs fisheries.","code":""},{"path":"https://framverse.github.io/framrsquared/reference/copy_fishery_scalers.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Experimental copying scaler inputs from one run to another DANGEROUS — copy_fishery_scalers","text":"","code":"if (FALSE) framdb |> copy_fishery_scalers(132, 133, 87) # \\dontrun{}"},{"path":"https://framverse.github.io/framrsquared/reference/disconnect_fram_db.html","id":null,"dir":"Reference","previous_headings":"","what":"Safely disconnect from FRAM database — disconnect_fram_db","title":"Safely disconnect from FRAM database — disconnect_fram_db","text":"Safely disconnect FRAM database","code":""},{"path":"https://framverse.github.io/framrsquared/reference/disconnect_fram_db.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Safely disconnect from FRAM database — disconnect_fram_db","text":"","code":"disconnect_fram_db(fram_db, quiet = TRUE)"},{"path":"https://framverse.github.io/framrsquared/reference/disconnect_fram_db.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Safely disconnect from FRAM database — disconnect_fram_db","text":"fram_db FRAM database R object quiet Logical. Optional; true, silences success message.","code":""},{"path":"https://framverse.github.io/framrsquared/reference/disconnect_fram_db.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Safely disconnect from FRAM database — disconnect_fram_db","text":"","code":"if (FALSE) disconnect_fram_db(fram_db) # \\dontrun{}"},{"path":"https://framverse.github.io/framrsquared/reference/error_check_code.html","id":null,"dir":"Reference","previous_headings":"","what":"Check code for common errors — error_check_code","title":"Check code for common errors — error_check_code","text":"Tool streamline development. Currently checks use filter() without dplyr::. call stats::filter(), usually intend. possible, add additional checks issues cause problems give informative error message (error message).","code":""},{"path":"https://framverse.github.io/framrsquared/reference/error_check_code.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Check code for common errors — error_check_code","text":"","code":"error_check_code(filepath, n = Inf)"},{"path":"https://framverse.github.io/framrsquared/reference/error_check_code.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Check code for common errors — error_check_code","text":"filepath Path R file checked n Number rows print. Default print rows, set smaller values output overwhelming.","code":""},{"path":"https://framverse.github.io/framrsquared/reference/error_check_code.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Check code for common errors — error_check_code","text":"","code":"if (FALSE) { # \\dontrun{ error_check_code(\"R/copy.R\") } # }"},{"path":"https://framverse.github.io/framrsquared/reference/fetch_quarto_templates.html","id":null,"dir":"Reference","previous_headings":"","what":"Creates quarto template files — fetch_quarto_templates","title":"Creates quarto template files — fetch_quarto_templates","text":"Creates template files specified organization specified path. Generally initialize_project() useful new R projects, fetch_quarto_templates() can helpful working existing projects. See initialize_project() details adding template files new organizations.","code":""},{"path":"https://framverse.github.io/framrsquared/reference/fetch_quarto_templates.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Creates quarto template files — fetch_quarto_templates","text":"","code":"fetch_quarto_templates(   to.path,   organization = \"WDFW\",   color = \"coffee\",   overwrite = FALSE )"},{"path":"https://framverse.github.io/framrsquared/reference/fetch_quarto_templates.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Creates quarto template files — fetch_quarto_templates","text":".path Character string. Destination file path template files. Typically, root Rproject directory. organization Character, defaults \"WDFW\". Specifies set quarto templates use. Currently supports \"WDFW\". color Character string, defaults \"coffee\". Specifies quarto template use; organizations may several. overwrite Boolean. Overwrite _quarto.yml style.css files already exist? Defaults FALSE.","code":""},{"path":"https://framverse.github.io/framrsquared/reference/fetch_quarto_templates.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Creates quarto template files — fetch_quarto_templates","text":"Nothing.","code":""},{"path":"https://framverse.github.io/framrsquared/reference/fetch_table.html","id":null,"dir":"Reference","previous_headings":"","what":"Fetches a complete table from a FRAM database. Returns a cleaned tibble. — fetch_table","title":"Fetches a complete table from a FRAM database. Returns a cleaned tibble. — fetch_table","text":"Fetches complete table FRAM database. Returns cleaned tibble.","code":""},{"path":"https://framverse.github.io/framrsquared/reference/fetch_table.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Fetches a complete table from a FRAM database. Returns a cleaned tibble. — fetch_table","text":"","code":"fetch_table(fram_db, table_name = NULL, warn = TRUE)"},{"path":"https://framverse.github.io/framrsquared/reference/fetch_table.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Fetches a complete table from a FRAM database. Returns a cleaned tibble. — fetch_table","text":"fram_db FRAM database object table_name Table fetched. given, list options printed warn Print warning fetching BackwardsFRAM table Chinook database? Defaults TRUE.","code":""},{"path":"https://framverse.github.io/framrsquared/reference/fetch_table.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Fetches a complete table from a FRAM database. Returns a cleaned tibble. — fetch_table","text":"","code":"if (FALSE) fram_db |> fetch_table('Mortality') # \\dontrun{}"},{"path":"https://framverse.github.io/framrsquared/reference/fetch_table_bkchin.html","id":null,"dir":"Reference","previous_headings":"","what":"Safely fetch Chinook BackwardsFRAM table — fetch_table_bkchin","title":"Safely fetch Chinook BackwardsFRAM table — fetch_table_bkchin","text":"BackwardsFRAM table uses stock_id different numbering system tables, includes sums joint stocks (e.g. marked unmarked pair stocks, BackwardsFRAM typically additional stock represents sum two). numbering different column name , joining Chinook BackwardsFRAM table tables can cause problems.","code":""},{"path":"https://framverse.github.io/framrsquared/reference/fetch_table_bkchin.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Safely fetch Chinook BackwardsFRAM table — fetch_table_bkchin","text":"","code":"fetch_table_bkchin(fram_db)"},{"path":"https://framverse.github.io/framrsquared/reference/fetch_table_bkchin.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Safely fetch Chinook BackwardsFRAM table — fetch_table_bkchin","text":"fram_db FRAM database object","code":""},{"path":"https://framverse.github.io/framrsquared/reference/fetch_table_bkchin.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Safely fetch Chinook BackwardsFRAM table — fetch_table_bkchin","text":"function augments fetch_table renaming stock_id column bk_stock_id, adding associated stock_id (NAs bkfram stock one new \"sum\" stocks associated bkfram stock names). function works Chinook databases. resulting dataframe necessarily exact match BackwardsFRAM table FRAM database. stock_id column differ (containing normal stock ID values instead bk stock ID values), two additional columns.","code":""},{"path":"https://framverse.github.io/framrsquared/reference/fetch_table_bkchin.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Safely fetch Chinook BackwardsFRAM table — fetch_table_bkchin","text":"","code":"#' @examples if (FALSE) { # \\dontrun{ ##Potentially problematic stock_id won't align with other tables fram_db |> fetch_table('BackwardsFRAM') ## \"safe\" version of the table; stock_id WILL align with other tables fram_db |> fetch_table_bkchin() } # }"},{"path":"https://framverse.github.io/framrsquared/reference/filter_ak.html","id":null,"dir":"Reference","previous_headings":"","what":"Filters a dataframe to Alaska fisheries. Will automatically detect whether it's working with a Chinook or Coho dataset if the tables were generated within this package. Requires a fishery_id column name. — filter_ak","title":"Filters a dataframe to Alaska fisheries. Will automatically detect whether it's working with a Chinook or Coho dataset if the tables were generated within this package. Requires a fishery_id column name. — filter_ak","text":"Filters dataframe Alaska fisheries. automatically detect whether working Chinook Coho dataset tables generated within package. Requires fishery_id column name.","code":""},{"path":"https://framverse.github.io/framrsquared/reference/filter_ak.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Filters a dataframe to Alaska fisheries. Will automatically detect whether it's working with a Chinook or Coho dataset if the tables were generated within this package. Requires a fishery_id column name. — filter_ak","text":"","code":"filter_ak(.data, species = NULL)"},{"path":"https://framverse.github.io/framrsquared/reference/filter_ak.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Filters a dataframe to Alaska fisheries. Will automatically detect whether it's working with a Chinook or Coho dataset if the tables were generated within this package. Requires a fishery_id column name. — filter_ak","text":".data Dataframe containing fishery_id column. Commonly, output framrsquared::fetch_table(). species Optional argument identify species .data already. provided, must \"COHO\" \"CHINOOK\". Defaults NULL","code":""},{"path":"https://framverse.github.io/framrsquared/reference/filter_ak.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Filters a dataframe to Alaska fisheries. Will automatically detect whether it's working with a Chinook or Coho dataset if the tables were generated within this package. Requires a fishery_id column name. — filter_ak","text":"","code":"if (FALSE) { # \\dontrun{ fram_dataframe |> filter_ak() } # } framrosetta::fishery_chinook_fram |> filter_ak(species = \"CHINOOK\") #> # A tibble: 3 × 5 #>   species version_number fishery_id fishery_name fishery_title   #>   <chr>            <int>      <int> <chr>        <chr>           #> 1 CHINOOK              1          1 SEAK Troll   SE Alaska Troll #> 2 CHINOOK              1          2 SEAK Net     SE Alaska Net   #> 3 CHINOOK              1          3 SEAK Sport   SE Alaska Sport framrosetta::fishery_coho_fram |> filter_ak(species = \"COHO\") #> # A tibble: 5 × 5 #>   species version_number fishery_id fishery_name fishery_title        #>   <chr>            <int>      <int> <chr>        <chr>                #> 1 COHO                 1        194 SW AK  Trl   SEAK Southwest Troll #> 2 COHO                 1        195 SE AK  Trl   SEAK Southeast Troll #> 3 COHO                 1        196 NW AK  Trl   SEAK Northwest Troll #> 4 COHO                 1        197 NE AK  Trl   SEAK Northeast Troll #> 5 COHO                 1        198 Alaska Net   Southeast Alaska Net"},{"path":"https://framverse.github.io/framrsquared/reference/filter_bc.html","id":null,"dir":"Reference","previous_headings":"","what":"Filters a dataframe to Canadian (BC) fisheries. Will automatically detect whether it's working with a Chinook or Coho dataset if the tables were generated within this package. Requires a fishery_id column name. — filter_bc","title":"Filters a dataframe to Canadian (BC) fisheries. Will automatically detect whether it's working with a Chinook or Coho dataset if the tables were generated within this package. Requires a fishery_id column name. — filter_bc","text":"Filters dataframe Canadian (BC) fisheries. automatically detect whether working Chinook Coho dataset tables generated within package. Requires fishery_id column name.","code":""},{"path":"https://framverse.github.io/framrsquared/reference/filter_bc.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Filters a dataframe to Canadian (BC) fisheries. Will automatically detect whether it's working with a Chinook or Coho dataset if the tables were generated within this package. Requires a fishery_id column name. — filter_bc","text":"","code":"filter_bc(.data, species = NULL)"},{"path":"https://framverse.github.io/framrsquared/reference/filter_bc.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Filters a dataframe to Canadian (BC) fisheries. Will automatically detect whether it's working with a Chinook or Coho dataset if the tables were generated within this package. Requires a fishery_id column name. — filter_bc","text":".data Dataframe containing fishery_id column. Commonly, output framrsquared::fetch_table(). species Optional argument identify species .data already. provided, must \"COHO\" \"CHINOOK\". Defaults NULL","code":""},{"path":"https://framverse.github.io/framrsquared/reference/filter_bc.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Filters a dataframe to Canadian (BC) fisheries. Will automatically detect whether it's working with a Chinook or Coho dataset if the tables were generated within this package. Requires a fishery_id column name. — filter_bc","text":"","code":"if (FALSE) { # \\dontrun{ fram_dataframe |> filter_bc() } # } framrosetta::fishery_chinook_fram |> filter_bc(species = \"CHINOOK\") #> # A tibble: 12 × 5 #>    species version_number fishery_id fishery_name fishery_title             #>    <chr>            <int>      <int> <chr>        <chr>                     #>  1 CHINOOK              1          4 N/C BC Net   BC No/Cent Net            #>  2 CHINOOK              1          5 WCVI Net     BC WCVI Net               #>  3 CHINOOK              1          6 GeoStr Net   BC Georgia Strait Net     #>  4 CHINOOK              1          7 BC JDF Net   BC JDF Net                #>  5 CHINOOK              1          8 BCOutSport   BC Outside Sport          #>  6 CHINOOK              1          9 N/C BC Trl   BC No/Cent Troll          #>  7 CHINOOK              1         10 WCVI Troll   BC WCVI Troll             #>  8 CHINOOK              1         11 WCVI Sport   BC WCVI Sport             #>  9 CHINOOK              1         12 GeoS Troll   BC Georgia Strait Troll   #> 10 CHINOOK              1         13 N GS Sport   BC N Georgia Strait Sport #> 11 CHINOOK              1         14 S GS Sport   BC S Georgia Strait Sport #> 12 CHINOOK              1         15 BC JDF Spt   BC JDF Sport              framrosetta::fishery_coho_fram |> filter_bc(species = \"COHO\") #> # A tibble: 27 × 5 #>    species version_number fishery_id fishery_name fishery_title             #>    <chr>            <int>      <int> <chr>        <chr>                     #>  1 COHO                 1        167 FRSLOW Trm   Lower Fraser R Term Catch #>  2 COHO                 1        168 FRSUPP Trm   Upper Fraser R Term Catch #>  3 COHO                 1        169 Fraser Spt   Lower Fraser River Sport  #>  4 COHO                 1        170 JStrBC Trl   Johnstone Strait Troll    #>  5 COHO                 1        171 No BC  Trl   BC Northern Troll         #>  6 COHO                 1        172 NoC BC Trl   BC North Central Troll    #>  7 COHO                 1        173 SoC BC Trl   BC South Central Troll    #>  8 COHO                 1        174 NW VI  Trl   NW Vancouver Island Troll #>  9 COHO                 1        175 SW VI  Trl   SW Vancouver Island Troll #> 10 COHO                 1        176 GeoStr Trl   Georgia Straits Troll     #> # ℹ 17 more rows"},{"path":"https://framverse.github.io/framrsquared/reference/filter_ca.html","id":null,"dir":"Reference","previous_headings":"","what":"Filters a dataframe to California fisheries. Will automatically detect whether it's working with a Chinook or Coho dataset if the tables were generated within this package. Requires a fishery_id column name. — filter_ca","title":"Filters a dataframe to California fisheries. Will automatically detect whether it's working with a Chinook or Coho dataset if the tables were generated within this package. Requires a fishery_id column name. — filter_ca","text":"Filters dataframe California fisheries. automatically detect whether working Chinook Coho dataset tables generated within package. Requires fishery_id column name.","code":""},{"path":"https://framverse.github.io/framrsquared/reference/filter_ca.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Filters a dataframe to California fisheries. Will automatically detect whether it's working with a Chinook or Coho dataset if the tables were generated within this package. Requires a fishery_id column name. — filter_ca","text":"","code":"filter_ca(.data, species = NULL)"},{"path":"https://framverse.github.io/framrsquared/reference/filter_ca.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Filters a dataframe to California fisheries. Will automatically detect whether it's working with a Chinook or Coho dataset if the tables were generated within this package. Requires a fishery_id column name. — filter_ca","text":".data Dataframe containing fishery_id column. Commonly, output framrsquared::fetch_table(). species Optional argument identify species .data already. provided, must \"COHO\" \"CHINOOK\". Defaults NULL","code":""},{"path":"https://framverse.github.io/framrsquared/reference/filter_ca.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Filters a dataframe to California fisheries. Will automatically detect whether it's working with a Chinook or Coho dataset if the tables were generated within this package. Requires a fishery_id column name. — filter_ca","text":"","code":"if (FALSE) { # \\dontrun{ fram_dataframe |> filter_ca() } # } framrosetta::fishery_chinook_fram |> filter_ca(species = \"CHINOOK\") #> # A tibble: 3 × 5 #>   species version_number fishery_id fishery_name fishery_title   #>   <chr>            <int>      <int> <chr>        <chr>           #> 1 CHINOOK              1         32 KMZ Troll    KMZ Troll       #> 2 CHINOOK              1         33 KMZ Sport    KMZ Sport       #> 3 CHINOOK              1         34 So Cal Trl   So Calif. Troll framrosetta::fishery_coho_fram |> filter_ca(species = \"COHO\") #> # A tibble: 8 × 5 #>   species version_number fishery_id fishery_name fishery_title               #>   <chr>            <int>      <int> <chr>        <chr>                       #> 1 COHO                 1          1 No Cal Trm   No Calif Cst Terminal Catch #> 2 COHO                 1          2 Cn Cal Trm   Cntrl Cal Cst Term Catch    #> 3 COHO                 1          3 Ft Brg Spt   Fort Bragg Sport            #> 4 COHO                 1          4 Ft Brg Trl   Fort Bragg Troll            #> 5 COHO                 1          5 Ca KMZ Spt   KMZ Sport                   #> 6 COHO                 1          6 Ca KMZ Trl   KMZ Troll                   #> 7 COHO                 1          7 So Cal Spt   So Calif. Sport             #> 8 COHO                 1          8 So Cal Trl   So Calif. Troll"},{"path":"https://framverse.github.io/framrsquared/reference/filter_coast.html","id":null,"dir":"Reference","previous_headings":"","what":"Filters a dataframe to Coastal fisheries. Will automatically detect whether it's working with a Chinook or Coho dataset if the tables were generated within this package. Requires a fishery_id column name. — filter_coast","title":"Filters a dataframe to Coastal fisheries. Will automatically detect whether it's working with a Chinook or Coho dataset if the tables were generated within this package. Requires a fishery_id column name. — filter_coast","text":"Filters dataframe Coastal fisheries. automatically detect whether working Chinook Coho dataset tables generated within package. Requires fishery_id column name.","code":""},{"path":"https://framverse.github.io/framrsquared/reference/filter_coast.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Filters a dataframe to Coastal fisheries. Will automatically detect whether it's working with a Chinook or Coho dataset if the tables were generated within this package. Requires a fishery_id column name. — filter_coast","text":"","code":"filter_coast(.data, species = NULL)"},{"path":"https://framverse.github.io/framrsquared/reference/filter_coast.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Filters a dataframe to Coastal fisheries. Will automatically detect whether it's working with a Chinook or Coho dataset if the tables were generated within this package. Requires a fishery_id column name. — filter_coast","text":".data Dataframe containing fishery_id column. Commonly, output framrsquared::fetch_table(). species Optional argument identify species .data already. provided, must \"COHO\" \"CHINOOK\". Defaults NULL","code":""},{"path":"https://framverse.github.io/framrsquared/reference/filter_coast.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Filters a dataframe to Coastal fisheries. Will automatically detect whether it's working with a Chinook or Coho dataset if the tables were generated within this package. Requires a fishery_id column name. — filter_coast","text":"","code":"if (FALSE) { # \\dontrun{ fram_dataframe |> filter_coast() } # } framrosetta::fishery_chinook_fram |> filter_coast(species = \"CHINOOK\") #> # A tibble: 35 × 5 #>    species version_number fishery_id fishery_name fishery_title         #>    <chr>            <int>      <int> <chr>        <chr>                 #>  1 CHINOOK              1          1 SEAK Troll   SE Alaska Troll       #>  2 CHINOOK              1          2 SEAK Net     SE Alaska Net         #>  3 CHINOOK              1          3 SEAK Sport   SE Alaska Sport       #>  4 CHINOOK              1          4 N/C BC Net   BC No/Cent Net        #>  5 CHINOOK              1          5 WCVI Net     BC WCVI Net           #>  6 CHINOOK              1          6 GeoStr Net   BC Georgia Strait Net #>  7 CHINOOK              1          7 BC JDF Net   BC JDF Net            #>  8 CHINOOK              1          8 BCOutSport   BC Outside Sport      #>  9 CHINOOK              1          9 N/C BC Trl   BC No/Cent Troll      #> 10 CHINOOK              1         10 WCVI Troll   BC WCVI Troll         #> # ℹ 25 more rows framrosetta::fishery_coho_fram |> filter_coast(species = \"COHO\") #> # A tibble: 65 × 5 #>    species version_number fishery_id fishery_name fishery_title               #>    <chr>            <int>      <int> <chr>        <chr>                       #>  1 COHO                 1          1 No Cal Trm   No Calif Cst Terminal Catch #>  2 COHO                 1          2 Cn Cal Trm   Cntrl Cal Cst Term Catch    #>  3 COHO                 1          3 Ft Brg Spt   Fort Bragg Sport            #>  4 COHO                 1          4 Ft Brg Trl   Fort Bragg Troll            #>  5 COHO                 1          5 Ca KMZ Spt   KMZ Sport                   #>  6 COHO                 1          6 Ca KMZ Trl   KMZ Troll                   #>  7 COHO                 1          7 So Cal Spt   So Calif. Sport             #>  8 COHO                 1          8 So Cal Trl   So Calif. Troll             #>  9 COHO                 1          9 So Ore Trm   So Ore Coast Terminal Catch #> 10 COHO                 1         10 Or Prv Trm   Ore Private Hat Term Catch  #> # ℹ 55 more rows"},{"path":"https://framverse.github.io/framrsquared/reference/filter_commercial_wa_nt.html","id":null,"dir":"Reference","previous_headings":"","what":"Filters a dataframe to WA non-treaty commercial fisheries. Will automatically detect whether it's working with a Chinook or Coho dataset if the tables were generated within this package. Requires a fishery_id column name. — filter_commercial_wa_nt","title":"Filters a dataframe to WA non-treaty commercial fisheries. Will automatically detect whether it's working with a Chinook or Coho dataset if the tables were generated within this package. Requires a fishery_id column name. — filter_commercial_wa_nt","text":"Filters dataframe WA non-treaty commercial fisheries. automatically detect whether working Chinook Coho dataset tables generated within package. Requires fishery_id column name.","code":""},{"path":"https://framverse.github.io/framrsquared/reference/filter_commercial_wa_nt.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Filters a dataframe to WA non-treaty commercial fisheries. Will automatically detect whether it's working with a Chinook or Coho dataset if the tables were generated within this package. Requires a fishery_id column name. — filter_commercial_wa_nt","text":"","code":"filter_commercial_wa_nt(.data, species = NULL)"},{"path":"https://framverse.github.io/framrsquared/reference/filter_commercial_wa_nt.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Filters a dataframe to WA non-treaty commercial fisheries. Will automatically detect whether it's working with a Chinook or Coho dataset if the tables were generated within this package. Requires a fishery_id column name. — filter_commercial_wa_nt","text":".data Dataframe containing fishery_id column. Commonly, output framrsquared::fetch_table(). species Optional argument identify species .data already. provided, must \"COHO\" \"CHINOOK\". Defaults NULL","code":""},{"path":"https://framverse.github.io/framrsquared/reference/filter_commercial_wa_nt.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Filters a dataframe to WA non-treaty commercial fisheries. Will automatically detect whether it's working with a Chinook or Coho dataset if the tables were generated within this package. Requires a fishery_id column name. — filter_commercial_wa_nt","text":"","code":"if (FALSE) { # \\dontrun{ fram_dataframe |> filter_commercial_wa_NT() } # } framrosetta::fishery_chinook_fram |> filter_commercial_wa_nt(species = \"CHINOOK\") #> # A tibble: 56 × 5 #>    species version_number fishery_id fishery_name fishery_title     #>    <chr>            <int>      <int> <chr>        <chr>             #>  1 CHINOOK              1         55 Tr 6B:9Net   Tr Area 6B:9 Net  #>  2 CHINOOK              1         56 A 10 Sport   NT Area 10 Sport  #>  3 CHINOOK              1         57 A 11 Sport   NT Area 11 Sport  #>  4 CHINOOK              1         58 NT10:11Net   NT Area 10:11 Net #>  5 CHINOOK              1         59 Tr10:11Net   Tr Area 10:11 Net #>  6 CHINOOK              1         60 A 10A Sprt   NT Area 10A Sport #>  7 CHINOOK              1         61 Tr 10A Net   Tr Area 10A Net   #>  8 CHINOOK              1         62 A 10E Sprt   NT Area 10E Sport #>  9 CHINOOK              1         63 Tr 10E Net   Tr Area 10E Net   #> 10 CHINOOK              1         64 A 12 Sport   NT Area 12 Sport  #> # ℹ 46 more rows framrosetta::fishery_coho_fram |> filter_commercial_wa_nt(species = \"COHO\") #> # A tibble: 144 × 5 #>    species version_number fishery_id fishery_name fishery_title                  #>    <chr>            <int>      <int> <chr>        <chr>                          #>  1 COHO                 1         23 Buoy10 Spt   Col. Rvr. Buoy 10 Sport        #>  2 COHO                 1         24 L ColR Spt   Col. Rvr. Lower R Sport        #>  3 COHO                 1         25 L ColR Net   Col. Rvr. Lower R Net          #>  4 COHO                 1         26 Yngs B Net   Col. Rvr. Youngs Bay Net       #>  5 COHO                 1         27 LCROrT Spt   Col. Rvr. Ore Trib Spt         #>  6 COHO                 1         28 Clackm Spt   Clackamas R Sport              #>  7 COHO                 1         29 SandyR Spt   Sandy R Sport                  #>  8 COHO                 1         30 LCRWaT Spt   Col. Rvr. Wash Trib Spt        #>  9 COHO                 1         31 UpColR Spt   Col. Rvr. Sport Above Bonnevi… #> 10 COHO                 1         32 UpColR Net   Col. Rvr. Net Above Bonneville #> # ℹ 134 more rows"},{"path":"https://framverse.github.io/framrsquared/reference/filter_flag.html","id":null,"dir":"Reference","previous_headings":"","what":"NA's all the information in the FisheryScalers that's not being used e.g Flag 1 only NS Scalers will be returned — filter_flag","title":"NA's all the information in the FisheryScalers that's not being used e.g Flag 1 only NS Scalers will be returned — filter_flag","text":"NA's information FisheryScalers used e.g Flag 1 NS Scalers returned","code":""},{"path":"https://framverse.github.io/framrsquared/reference/filter_flag.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"NA's all the information in the FisheryScalers that's not being used e.g Flag 1 only NS Scalers will be returned — filter_flag","text":"","code":"filter_flag(.data)"},{"path":"https://framverse.github.io/framrsquared/reference/filter_flag.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"NA's all the information in the FisheryScalers that's not being used e.g Flag 1 only NS Scalers will be returned — filter_flag","text":".data Fishery Scalers table","code":""},{"path":"https://framverse.github.io/framrsquared/reference/filter_flag.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"NA's all the information in the FisheryScalers that's not being used e.g Flag 1 only NS Scalers will be returned — filter_flag","text":"","code":"if (FALSE)  fishery_scalers_table |> filter_flag() # \\dontrun{}"},{"path":"https://framverse.github.io/framrsquared/reference/filter_marine.html","id":null,"dir":"Reference","previous_headings":"","what":"Filters a dataframe to marine fisheries. Will automatically detect whether it's working with a Chinook or Coho dataset if the tables were generated within this package. Requires a fishery_id column name. — filter_marine","title":"Filters a dataframe to marine fisheries. Will automatically detect whether it's working with a Chinook or Coho dataset if the tables were generated within this package. Requires a fishery_id column name. — filter_marine","text":"Filters dataframe marine fisheries. automatically detect whether working Chinook Coho dataset tables generated within package. Requires fishery_id column name.","code":""},{"path":"https://framverse.github.io/framrsquared/reference/filter_marine.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Filters a dataframe to marine fisheries. Will automatically detect whether it's working with a Chinook or Coho dataset if the tables were generated within this package. Requires a fishery_id column name. — filter_marine","text":"","code":"filter_marine(.data, species = NULL)"},{"path":"https://framverse.github.io/framrsquared/reference/filter_marine.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Filters a dataframe to marine fisheries. Will automatically detect whether it's working with a Chinook or Coho dataset if the tables were generated within this package. Requires a fishery_id column name. — filter_marine","text":".data Dataframe containing fishery_id column. Commonly, output framrsquared::fetch_table(). species Optional argument identify species .data already. provided, must \"COHO\" \"CHINOOK\". Defaults NULL","code":""},{"path":"https://framverse.github.io/framrsquared/reference/filter_marine.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Filters a dataframe to marine fisheries. Will automatically detect whether it's working with a Chinook or Coho dataset if the tables were generated within this package. Requires a fishery_id column name. — filter_marine","text":"","code":"if (FALSE) { # \\dontrun{ fram_dataframe |> filter_marine() } # } framrosetta::fishery_chinook_fram |> filter_marine(species = \"CHINOOK\") #> # A tibble: 71 × 5 #>    species version_number fishery_id fishery_name fishery_title     #>    <chr>            <int>      <int> <chr>        <chr>             #>  1 CHINOOK              1         55 Tr 6B:9Net   Tr Area 6B:9 Net  #>  2 CHINOOK              1         56 A 10 Sport   NT Area 10 Sport  #>  3 CHINOOK              1         57 A 11 Sport   NT Area 11 Sport  #>  4 CHINOOK              1         58 NT10:11Net   NT Area 10:11 Net #>  5 CHINOOK              1         59 Tr10:11Net   Tr Area 10:11 Net #>  6 CHINOOK              1         60 A 10A Sprt   NT Area 10A Sport #>  7 CHINOOK              1         61 Tr 10A Net   Tr Area 10A Net   #>  8 CHINOOK              1         62 A 10E Sprt   NT Area 10E Sport #>  9 CHINOOK              1         63 Tr 10E Net   Tr Area 10E Net   #> 10 CHINOOK              1         64 A 12 Sport   NT Area 12 Sport  #> # ℹ 61 more rows framrosetta::fishery_coho_fram |> filter_marine(species = \"COHO\") #> # A tibble: 115 × 5 #>    species version_number fishery_id fishery_name fishery_title    #>    <chr>            <int>      <int> <chr>        <chr>            #>  1 COHO                 1          3 Ft Brg Spt   Fort Bragg Sport #>  2 COHO                 1          4 Ft Brg Trl   Fort Bragg Troll #>  3 COHO                 1          5 Ca KMZ Spt   KMZ Sport        #>  4 COHO                 1          6 Ca KMZ Trl   KMZ Troll        #>  5 COHO                 1          7 So Cal Spt   So Calif. Sport  #>  6 COHO                 1          8 So Cal Trl   So Calif. Troll  #>  7 COHO                 1         15 Brkngs Spt   Brookings Sport  #>  8 COHO                 1         16 Brkngs Trl   Brookings Troll  #>  9 COHO                 1         17 Newprt Spt   Newport Sport    #> 10 COHO                 1         18 Newprt Trl   Newport Troll    #> # ℹ 105 more rows"},{"path":"https://framverse.github.io/framrsquared/reference/filter_net.html","id":null,"dir":"Reference","previous_headings":"","what":"Filters a dataframe to net fisheries. Will automatically detect whether it's working with a Chinook or Coho dataset if the tables were generated within this package. Requires a fishery_id column name. — filter_net","title":"Filters a dataframe to net fisheries. Will automatically detect whether it's working with a Chinook or Coho dataset if the tables were generated within this package. Requires a fishery_id column name. — filter_net","text":"Filters dataframe net fisheries. automatically detect whether working Chinook Coho dataset tables generated within package. Requires fishery_id column name.","code":""},{"path":"https://framverse.github.io/framrsquared/reference/filter_net.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Filters a dataframe to net fisheries. Will automatically detect whether it's working with a Chinook or Coho dataset if the tables were generated within this package. Requires a fishery_id column name. — filter_net","text":"","code":"filter_net(.data, species = NULL)"},{"path":"https://framverse.github.io/framrsquared/reference/filter_net.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Filters a dataframe to net fisheries. Will automatically detect whether it's working with a Chinook or Coho dataset if the tables were generated within this package. Requires a fishery_id column name. — filter_net","text":".data Dataframe containing fishery_id column. Commonly, output framrsquared::fetch_table(). species Optional argument identify species .data already. provided, must \"COHO\" \"CHINOOK\". Defaults NULL","code":""},{"path":"https://framverse.github.io/framrsquared/reference/filter_net.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Filters a dataframe to net fisheries. Will automatically detect whether it's working with a Chinook or Coho dataset if the tables were generated within this package. Requires a fishery_id column name. — filter_net","text":"","code":"if (FALSE) { # \\dontrun{ fram_dataframe |> filter_net() } # } framrosetta::fishery_chinook_fram |> filter_net(species = \"CHINOOK\") #> # A tibble: 47 × 5 #>    species version_number fishery_id fishery_name fishery_title     #>    <chr>            <int>      <int> <chr>        <chr>             #>  1 CHINOOK              1         55 Tr 6B:9Net   Tr Area 6B:9 Net  #>  2 CHINOOK              1         58 NT10:11Net   NT Area 10:11 Net #>  3 CHINOOK              1         59 Tr10:11Net   Tr Area 10:11 Net #>  4 CHINOOK              1         61 Tr 10A Net   Tr Area 10A Net   #>  5 CHINOOK              1         63 Tr 10E Net   Tr Area 10E Net   #>  6 CHINOOK              1         65 NT HC Net    NT Hood Canal Net #>  7 CHINOOK              1         66 Tr HC Net    Tr Hood Canal Net #>  8 CHINOOK              1         68 NT SPS Net   NT SPS Net        #>  9 CHINOOK              1         69 Tr SPS Net   Tr SPS Net        #> 10 CHINOOK              1         70 NT 13A Net   NT Area 13A Net   #> # ℹ 37 more rows framrosetta::fishery_coho_fram |> filter_net(species = \"COHO\") #> # A tibble: 128 × 5 #>    species version_number fishery_id fishery_name fishery_title               #>    <chr>            <int>      <int> <chr>        <chr>                       #>  1 COHO                 1          1 No Cal Trm   No Calif Cst Terminal Catch #>  2 COHO                 1          2 Cn Cal Trm   Cntrl Cal Cst Term Catch    #>  3 COHO                 1          4 Ft Brg Trl   Fort Bragg Troll            #>  4 COHO                 1          6 Ca KMZ Trl   KMZ Troll                   #>  5 COHO                 1          8 So Cal Trl   So Calif. Troll             #>  6 COHO                 1          9 So Ore Trm   So Ore Coast Terminal Catch #>  7 COHO                 1         10 Or Prv Trm   Ore Private Hat Term Catch  #>  8 COHO                 1         11 SMi Or Trm   So Mid Ore Coast Term Catch #>  9 COHO                 1         12 NMi Or Trm   No Mid Ore Coast Term Catch #> 10 COHO                 1         13 No Ore Trm   North Ore Coast Term Catch  #> # ℹ 118 more rows"},{"path":"https://framverse.github.io/framrsquared/reference/filter_or.html","id":null,"dir":"Reference","previous_headings":"","what":"Filters a dataframe to Oregon fisheries. Will automatically detect whether it's working with a Chinook or Coho dataset if the tables were generated within this package. Requires a fishery_id column name. — filter_or","title":"Filters a dataframe to Oregon fisheries. Will automatically detect whether it's working with a Chinook or Coho dataset if the tables were generated within this package. Requires a fishery_id column name. — filter_or","text":"Filters dataframe Oregon fisheries. automatically detect whether working Chinook Coho dataset tables generated within package. Requires fishery_id column name.","code":""},{"path":"https://framverse.github.io/framrsquared/reference/filter_or.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Filters a dataframe to Oregon fisheries. Will automatically detect whether it's working with a Chinook or Coho dataset if the tables were generated within this package. Requires a fishery_id column name. — filter_or","text":"","code":"filter_or(.data, species = NULL)"},{"path":"https://framverse.github.io/framrsquared/reference/filter_or.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Filters a dataframe to Oregon fisheries. Will automatically detect whether it's working with a Chinook or Coho dataset if the tables were generated within this package. Requires a fishery_id column name. — filter_or","text":".data Dataframe containing fishery_id column. Commonly, output framrsquared::fetch_table(). species Optional argument identify species .data already. provided, must \"COHO\" \"CHINOOK\". Defaults NULL","code":""},{"path":"https://framverse.github.io/framrsquared/reference/filter_or.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Filters a dataframe to Oregon fisheries. Will automatically detect whether it's working with a Chinook or Coho dataset if the tables were generated within this package. Requires a fishery_id column name. — filter_or","text":"","code":"if (FALSE) { # \\dontrun{ fram_dataframe |> filter_or() } # } framrosetta::fishery_chinook_fram |> filter_or(species = \"CHINOOK\") #> # A tibble: 6 × 5 #>   species version_number fishery_id fishery_name fishery_title      #>   <chr>            <int>      <int> <chr>        <chr>              #> 1 CHINOOK              1         28 ColRvr Net   Columbia River Net #> 2 CHINOOK              1         29 Buoy10 Spt   Buoy 10 Sport      #> 3 CHINOOK              1         30 Cen OR Trl   Central OR Troll   #> 4 CHINOOK              1         31 Cen OR Spt   Central OR Sport   #> 5 CHINOOK              1         32 KMZ Troll    KMZ Troll          #> 6 CHINOOK              1         33 KMZ Sport    KMZ Sport          framrosetta::fishery_coho_fram |> filter_or(species = \"COHO\") #> # A tibble: 28 × 5 #>    species version_number fishery_id fishery_name fishery_title               #>    <chr>            <int>      <int> <chr>        <chr>                       #>  1 COHO                 1          5 Ca KMZ Spt   KMZ Sport                   #>  2 COHO                 1          6 Ca KMZ Trl   KMZ Troll                   #>  3 COHO                 1          7 So Cal Spt   So Calif. Sport             #>  4 COHO                 1          8 So Cal Trl   So Calif. Troll             #>  5 COHO                 1          9 So Ore Trm   So Ore Coast Terminal Catch #>  6 COHO                 1         10 Or Prv Trm   Ore Private Hat Term Catch  #>  7 COHO                 1         11 SMi Or Trm   So Mid Ore Coast Term Catch #>  8 COHO                 1         12 NMi Or Trm   No Mid Ore Coast Term Catch #>  9 COHO                 1         13 No Ore Trm   North Ore Coast Term Catch  #> 10 COHO                 1         14 Or Cst Trm   Oregon Coast Term Catch     #> # ℹ 18 more rows"},{"path":"https://framverse.github.io/framrsquared/reference/filter_puget_sound.html","id":null,"dir":"Reference","previous_headings":"","what":"Filters a dataframe to Puget Sound fisheries. Will automatically detect whether it's working with a Chinook or Coho dataset if the tables were generated within this package. Requires a fishery_id column name. — filter_puget_sound","title":"Filters a dataframe to Puget Sound fisheries. Will automatically detect whether it's working with a Chinook or Coho dataset if the tables were generated within this package. Requires a fishery_id column name. — filter_puget_sound","text":"Filters dataframe Puget Sound fisheries. automatically detect whether working Chinook Coho dataset tables generated within package. Requires fishery_id column name.","code":""},{"path":"https://framverse.github.io/framrsquared/reference/filter_puget_sound.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Filters a dataframe to Puget Sound fisheries. Will automatically detect whether it's working with a Chinook or Coho dataset if the tables were generated within this package. Requires a fishery_id column name. — filter_puget_sound","text":"","code":"filter_puget_sound(.data, species = NULL)"},{"path":"https://framverse.github.io/framrsquared/reference/filter_puget_sound.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Filters a dataframe to Puget Sound fisheries. Will automatically detect whether it's working with a Chinook or Coho dataset if the tables were generated within this package. Requires a fishery_id column name. — filter_puget_sound","text":".data Dataframe containing fishery_id column. Commonly, output framrsquared::fetch_table(). species Optional argument identify species .data already. provided, must \"COHO\" \"CHINOOK\". Defaults NULL","code":""},{"path":"https://framverse.github.io/framrsquared/reference/filter_puget_sound.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Filters a dataframe to Puget Sound fisheries. Will automatically detect whether it's working with a Chinook or Coho dataset if the tables were generated within this package. Requires a fishery_id column name. — filter_puget_sound","text":"","code":"if (FALSE) { # \\dontrun{ fram_dataframe |> filter_puget_sound() } # } framrosetta::fishery_chinook_fram |> filter_puget_sound(species = \"CHINOOK\") #> # A tibble: 36 × 5 #>    species version_number fishery_id fishery_name fishery_title     #>    <chr>            <int>      <int> <chr>        <chr>             #>  1 CHINOOK              1         55 Tr 6B:9Net   Tr Area 6B:9 Net  #>  2 CHINOOK              1         56 A 10 Sport   NT Area 10 Sport  #>  3 CHINOOK              1         57 A 11 Sport   NT Area 11 Sport  #>  4 CHINOOK              1         58 NT10:11Net   NT Area 10:11 Net #>  5 CHINOOK              1         59 Tr10:11Net   Tr Area 10:11 Net #>  6 CHINOOK              1         60 A 10A Sprt   NT Area 10A Sport #>  7 CHINOOK              1         61 Tr 10A Net   Tr Area 10A Net   #>  8 CHINOOK              1         62 A 10E Sprt   NT Area 10E Sport #>  9 CHINOOK              1         63 Tr 10E Net   Tr Area 10E Net   #> 10 CHINOOK              1         64 A 12 Sport   NT Area 12 Sport  #> # ℹ 26 more rows framrosetta::fishery_coho_fram |> filter_puget_sound(species = \"COHO\") #> # A tibble: 91 × 5 #>    species version_number fishery_id fishery_name fishery_title                  #>    <chr>            <int>      <int> <chr>        <chr>                          #>  1 COHO                 1         76 Mak FW Spt   Makah Tributary Sport          #>  2 COHO                 1         77 Mak FW Net   Makah Freshwater Net           #>  3 COHO                 1         78 Makah  C&S   Makah C&S                      #>  4 COHO                 1         79 A 4-4A Net   WA Area 4-4A Net               #>  5 COHO                 1         80 A4B6CNetNT   WA Area 4B-5-6C Non-Treaty Net #>  6 COHO                 1         81 A4B6CNetTR   WA Area 4B-5-6C Treaty Net     #>  7 COHO                 1         82 Ar6D NetNT   6D Non-Treaty Net (Dungeness … #>  8 COHO                 1         83 Ar6D NetTR   6D Treaty Net (Dungeness Bay … #>  9 COHO                 1         84 Elwha  Net   Elwha R Net                    #> 10 COHO                 1         85 WJDF T Net   West JDF Straits Trib Net      #> # ℹ 81 more rows"},{"path":"https://framverse.github.io/framrsquared/reference/filter_sport.html","id":null,"dir":"Reference","previous_headings":"","what":"Filters a dataframe to sport fisheries. Will automatically detect whether it's working with a Chinook or Coho dataset if the tables were generated within this package. Requires a fishery_id column name. — filter_sport","title":"Filters a dataframe to sport fisheries. Will automatically detect whether it's working with a Chinook or Coho dataset if the tables were generated within this package. Requires a fishery_id column name. — filter_sport","text":"Filters dataframe sport fisheries. automatically detect whether working Chinook Coho dataset tables generated within package. Requires fishery_id column name.","code":""},{"path":"https://framverse.github.io/framrsquared/reference/filter_sport.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Filters a dataframe to sport fisheries. Will automatically detect whether it's working with a Chinook or Coho dataset if the tables were generated within this package. Requires a fishery_id column name. — filter_sport","text":"","code":"filter_sport(.data, species = NULL)"},{"path":"https://framverse.github.io/framrsquared/reference/filter_sport.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Filters a dataframe to sport fisheries. Will automatically detect whether it's working with a Chinook or Coho dataset if the tables were generated within this package. Requires a fishery_id column name. — filter_sport","text":".data Dataframe containing fishery_id column. Commonly, output framrsquared::fetch_table(). species Optional argument identify species .data already. provided, must \"COHO\" \"CHINOOK\". Defaults NULL","code":""},{"path":"https://framverse.github.io/framrsquared/reference/filter_sport.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Filters a dataframe to sport fisheries. Will automatically detect whether it's working with a Chinook or Coho dataset if the tables were generated within this package. Requires a fishery_id column name. — filter_sport","text":"","code":"if (FALSE) { # \\dontrun{ fram_dataframe |> filter_sport() } # } framrosetta::fishery_chinook_fram |> filter_sport(species = \"CHINOOK\") #> # A tibble: 26 × 5 #>    species version_number fishery_id fishery_name fishery_title     #>    <chr>            <int>      <int> <chr>        <chr>             #>  1 CHINOOK              1         56 A 10 Sport   NT Area 10 Sport  #>  2 CHINOOK              1         57 A 11 Sport   NT Area 11 Sport  #>  3 CHINOOK              1         60 A 10A Sprt   NT Area 10A Sport #>  4 CHINOOK              1         62 A 10E Sprt   NT Area 10E Sport #>  5 CHINOOK              1         64 A 12 Sport   NT Area 12 Sport  #>  6 CHINOOK              1         67 A 13 Sport   NT Area 13 Sport  #>  7 CHINOOK              1         72 FW Sport     Freshwater Sport  #>  8 CHINOOK              1          3 SEAK Sport   SE Alaska Sport   #>  9 CHINOOK              1          8 BCOutSport   BC Outside Sport  #> 10 CHINOOK              1         11 WCVI Sport   BC WCVI Sport     #> # ℹ 16 more rows framrosetta::fishery_coho_fram |> filter_sport(species = \"COHO\") #> # A tibble: 70 × 5 #>    species version_number fishery_id fishery_name fishery_title           #>    <chr>            <int>      <int> <chr>        <chr>                   #>  1 COHO                 1          3 Ft Brg Spt   Fort Bragg Sport        #>  2 COHO                 1          5 Ca KMZ Spt   KMZ Sport               #>  3 COHO                 1          7 So Cal Spt   So Calif. Sport         #>  4 COHO                 1         15 Brkngs Spt   Brookings Sport         #>  5 COHO                 1         17 Newprt Spt   Newport Sport           #>  6 COHO                 1         19 Coos B Spt   Coos Bay Sport          #>  7 COHO                 1         21 Tillmk Spt   Tillamook Sport         #>  8 COHO                 1         23 Buoy10 Spt   Col. Rvr. Buoy 10 Sport #>  9 COHO                 1         24 L ColR Spt   Col. Rvr. Lower R Sport #> 10 COHO                 1         28 Clackm Spt   Clackamas R Sport       #> # ℹ 60 more rows"},{"path":"https://framverse.github.io/framrsquared/reference/filter_wa.html","id":null,"dir":"Reference","previous_headings":"","what":"Filters a dataframe to Washington State fisheries. Will automatically detect whether it's working with a Chinook or Coho dataset if the tables were generated within this package. Requires a fishery_id column name. — filter_wa","title":"Filters a dataframe to Washington State fisheries. Will automatically detect whether it's working with a Chinook or Coho dataset if the tables were generated within this package. Requires a fishery_id column name. — filter_wa","text":"Filters dataframe Washington State fisheries. automatically detect whether working Chinook Coho dataset tables generated within package. Requires fishery_id column name.","code":""},{"path":"https://framverse.github.io/framrsquared/reference/filter_wa.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Filters a dataframe to Washington State fisheries. Will automatically detect whether it's working with a Chinook or Coho dataset if the tables were generated within this package. Requires a fishery_id column name. — filter_wa","text":"","code":"filter_wa(.data, species = NULL)"},{"path":"https://framverse.github.io/framrsquared/reference/filter_wa.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Filters a dataframe to Washington State fisheries. Will automatically detect whether it's working with a Chinook or Coho dataset if the tables were generated within this package. Requires a fishery_id column name. — filter_wa","text":".data Dataframe containing fishery_id column. Commonly, output framrsquared::fetch_table(). species Optional argument identify species .data already. provided, must \"COHO\" \"CHINOOK\". Defaults NULL","code":""},{"path":"https://framverse.github.io/framrsquared/reference/filter_wa.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Filters a dataframe to Washington State fisheries. Will automatically detect whether it's working with a Chinook or Coho dataset if the tables were generated within this package. Requires a fishery_id column name. — filter_wa","text":"","code":"if (FALSE) { # \\dontrun{ fram_dataframe |> filter_wa() } # } framrosetta::fishery_chinook_fram |> filter_wa(species = \"CHINOOK\") #> # A tibble: 56 × 5 #>    species version_number fishery_id fishery_name fishery_title     #>    <chr>            <int>      <int> <chr>        <chr>             #>  1 CHINOOK              1         55 Tr 6B:9Net   Tr Area 6B:9 Net  #>  2 CHINOOK              1         56 A 10 Sport   NT Area 10 Sport  #>  3 CHINOOK              1         57 A 11 Sport   NT Area 11 Sport  #>  4 CHINOOK              1         58 NT10:11Net   NT Area 10:11 Net #>  5 CHINOOK              1         59 Tr10:11Net   Tr Area 10:11 Net #>  6 CHINOOK              1         60 A 10A Sprt   NT Area 10A Sport #>  7 CHINOOK              1         61 Tr 10A Net   Tr Area 10A Net   #>  8 CHINOOK              1         62 A 10E Sprt   NT Area 10E Sport #>  9 CHINOOK              1         63 Tr 10E Net   Tr Area 10E Net   #> 10 CHINOOK              1         64 A 12 Sport   NT Area 12 Sport  #> # ℹ 46 more rows framrosetta::fishery_coho_fram |> filter_wa(species = \"COHO\") #> # A tibble: 144 × 5 #>    species version_number fishery_id fishery_name fishery_title                  #>    <chr>            <int>      <int> <chr>        <chr>                          #>  1 COHO                 1         23 Buoy10 Spt   Col. Rvr. Buoy 10 Sport        #>  2 COHO                 1         24 L ColR Spt   Col. Rvr. Lower R Sport        #>  3 COHO                 1         25 L ColR Net   Col. Rvr. Lower R Net          #>  4 COHO                 1         26 Yngs B Net   Col. Rvr. Youngs Bay Net       #>  5 COHO                 1         27 LCROrT Spt   Col. Rvr. Ore Trib Spt         #>  6 COHO                 1         28 Clackm Spt   Clackamas R Sport              #>  7 COHO                 1         29 SandyR Spt   Sandy R Sport                  #>  8 COHO                 1         30 LCRWaT Spt   Col. Rvr. Wash Trib Spt        #>  9 COHO                 1         31 UpColR Spt   Col. Rvr. Sport Above Bonnevi… #> 10 COHO                 1         32 UpColR Net   Col. Rvr. Net Above Bonneville #> # ℹ 134 more rows"},{"path":"https://framverse.github.io/framrsquared/reference/find_tables_by_column_.html","id":null,"dir":"Reference","previous_headings":"","what":"Finds tables that contain a specific column name — find_tables_by_column_","title":"Finds tables that contain a specific column name — find_tables_by_column_","text":"Finds tables contain specific column name","code":""},{"path":"https://framverse.github.io/framrsquared/reference/find_tables_by_column_.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Finds tables that contain a specific column name — find_tables_by_column_","text":"","code":"find_tables_by_column_(fram_db, column_name)"},{"path":"https://framverse.github.io/framrsquared/reference/find_tables_by_column_.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Finds tables that contain a specific column name — find_tables_by_column_","text":"fram_db FRAM database object column_name Name column","code":""},{"path":"https://framverse.github.io/framrsquared/reference/find_tables_by_column_.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Finds tables that contain a specific column name — find_tables_by_column_","text":"","code":"if (FALSE) fram_db |> find_tables_by_column_('RunID') # \\dontrun{}"},{"path":"https://framverse.github.io/framrsquared/reference/fishery_mortality.html","id":null,"dir":"Reference","previous_headings":"","what":"Returns a tibble matching the Fishery Mortality screen. — fishery_mortality","title":"Returns a tibble matching the Fishery Mortality screen. — fishery_mortality","text":"Returns tibble matching Fishery Mortality screen.","code":""},{"path":"https://framverse.github.io/framrsquared/reference/fishery_mortality.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Returns a tibble matching the Fishery Mortality screen. — fishery_mortality","text":"","code":"fishery_mortality(fram_db, run_id = NULL, msp = TRUE)"},{"path":"https://framverse.github.io/framrsquared/reference/fishery_mortality.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Returns a tibble matching the Fishery Mortality screen. — fishery_mortality","text":"fram_db FRAM database object run_id Run ID msp Model Stock Proportion, default TRUE","code":""},{"path":"https://framverse.github.io/framrsquared/reference/fishery_mortality.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Returns a tibble matching the Fishery Mortality screen. — fishery_mortality","text":"","code":"if (FALSE) { # \\dontrun{ fram_db |> fishery_mortality(run_id = 101) } # }"},{"path":"https://framverse.github.io/framrsquared/reference/fram_clean_tables.html","id":null,"dir":"Reference","previous_headings":"","what":"Cleans the names of FRAM tables and coverts to a tibble — fram_clean_tables","title":"Cleans the names of FRAM tables and coverts to a tibble — fram_clean_tables","text":"Cleans names FRAM tables coverts tibble","code":""},{"path":"https://framverse.github.io/framrsquared/reference/fram_clean_tables.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Cleans the names of FRAM tables and coverts to a tibble — fram_clean_tables","text":"","code":"fram_clean_tables(.data)"},{"path":"https://framverse.github.io/framrsquared/reference/fram_clean_tables.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Cleans the names of FRAM tables and coverts to a tibble — fram_clean_tables","text":".data Dataframe","code":""},{"path":"https://framverse.github.io/framrsquared/reference/fram_clean_tables.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Cleans the names of FRAM tables and coverts to a tibble — fram_clean_tables","text":"","code":"if (FALSE) fram_dataframe |> fram_clean_tables() # \\dontrun{}"},{"path":"https://framverse.github.io/framrsquared/reference/fram_database_species.html","id":null,"dir":"Reference","previous_headings":"","what":"Identifies the FRAM database species focus - Chinook or Coho — fram_database_species","title":"Identifies the FRAM database species focus - Chinook or Coho — fram_database_species","text":"Identifies FRAM database species focus - Chinook Coho","code":""},{"path":"https://framverse.github.io/framrsquared/reference/fram_database_species.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Identifies the FRAM database species focus - Chinook or Coho — fram_database_species","text":"","code":"fram_database_species(con)"},{"path":"https://framverse.github.io/framrsquared/reference/fram_database_species.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Identifies the FRAM database species focus - Chinook or Coho — fram_database_species","text":"con Connection FRAM database","code":""},{"path":"https://framverse.github.io/framrsquared/reference/fram_database_species.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Identifies the FRAM database species focus - Chinook or Coho — fram_database_species","text":"","code":"if (FALSE) fram_database_species(con) # \\dontrun{}"},{"path":"https://framverse.github.io/framrsquared/reference/fram_database_type.html","id":null,"dir":"Reference","previous_headings":"","what":"Identifies the FRAM database type - Full or Transfer — fram_database_type","title":"Identifies the FRAM database type - Full or Transfer — fram_database_type","text":"Identifies FRAM database type - Full Transfer","code":""},{"path":"https://framverse.github.io/framrsquared/reference/fram_database_type.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Identifies the FRAM database type - Full or Transfer — fram_database_type","text":"","code":"fram_database_type(con)"},{"path":"https://framverse.github.io/framrsquared/reference/fram_database_type.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Identifies the FRAM database type - Full or Transfer — fram_database_type","text":"con Connection FRAM database","code":""},{"path":"https://framverse.github.io/framrsquared/reference/fram_database_type.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Identifies the FRAM database type - Full or Transfer — fram_database_type","text":"","code":"if (FALSE) fram_database_type(con) # \\dontrun{}"},{"path":"https://framverse.github.io/framrsquared/reference/framrsquared-package.html","id":null,"dir":"Reference","previous_headings":"","what":"framrsquared: FRAM Database Interface — framrsquared-package","title":"framrsquared: FRAM Database Interface — framrsquared-package","text":"convenient tool interfacing FRAM access databases R environments.","code":""},{"path":[]},{"path":"https://framverse.github.io/framrsquared/reference/framrsquared-package.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"framrsquared: FRAM Database Interface — framrsquared-package","text":"Maintainer: Ty Garber tyler.garber@dfw.wa.gov Authors: Collin Edwards collin.edwards@dfw.wa.gov (ORCID)","code":""},{"path":"https://framverse.github.io/framrsquared/reference/get_run_ids.html","id":null,"dir":"Reference","previous_headings":"","what":"Gets all run_ids of FRAM database — get_run_ids","title":"Gets all run_ids of FRAM database — get_run_ids","text":"Gets run_ids FRAM database","code":""},{"path":"https://framverse.github.io/framrsquared/reference/get_run_ids.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Gets all run_ids of FRAM database — get_run_ids","text":"","code":"get_run_ids(fram_db)"},{"path":"https://framverse.github.io/framrsquared/reference/get_run_ids.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Gets all run_ids of FRAM database — get_run_ids","text":"fram_db Fram database object","code":""},{"path":"https://framverse.github.io/framrsquared/reference/get_run_ids.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Gets all run_ids of FRAM database — get_run_ids","text":"","code":"if (FALSE) fram_dataframe |> get_run_ids() # \\dontrun{}"},{"path":"https://framverse.github.io/framrsquared/reference/initialize_project.html","id":null,"dir":"Reference","previous_headings":"","what":" Initializes a FRAM project — initialize_project","title":" Initializes a FRAM project — initialize_project","text":"default, creates suggested folder structure best coding practices, adds WDFW-style yaml style.css files give quarto files consistent appearance. belong another organization want function support organization-specific quarto styling, reach developers _quarto.yml (optionally) style.css file.","code":""},{"path":"https://framverse.github.io/framrsquared/reference/initialize_project.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":" Initializes a FRAM project — initialize_project","text":"","code":"initialize_project(   folders = c(\"scripts\", \"original_data\", \"cleaned_data\", \"figures\", \"results\",     \"results/quarto_output\"),   quarto = TRUE,   organization = \"WDFW\",   renv = FALSE,   template.overwrite = TRUE,   color = \"coffee\",   quiet = TRUE )"},{"path":"https://framverse.github.io/framrsquared/reference/initialize_project.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":" Initializes a FRAM project — initialize_project","text":"folders Vector folders create quarto Boolean. TRUE, add quarto yaml file style.css organization Character, defaults \"WDFW\". Specifies set quarto templates use. Currently supports \"WDFW\". renv Boolean initialize renv. Defaults FALSE. template.overwrite Boolean. Overwrite _quarto.yml style.css files already exist? Defaults TRUE color Character string, defaults \"coffee\". Specifies quarto template use; organizations may several. quiet Boolean, defaults FALSE. TRUE, suppresses informational messages.","code":""},{"path":"https://framverse.github.io/framrsquared/reference/initialize_project.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":" Initializes a FRAM project — initialize_project","text":"Dev note: new template files additional organizations added inst/ subfolder matching R-friendly organization name, name added organization parameter description supported_organizations fetch_quarto_templates().","code":""},{"path":"https://framverse.github.io/framrsquared/reference/initialize_project.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":" Initializes a FRAM project — initialize_project","text":"","code":"if (FALSE) { # \\dontrun{ framrsquared::initialize_project() } # }"},{"path":"https://framverse.github.io/framrsquared/reference/input_summary_.html","id":null,"dir":"Reference","previous_headings":"","what":"Generates an input summary based on a FisheryScalers dataframe. Probably end up streamlining / revising this. — input_summary_","title":"Generates an input summary based on a FisheryScalers dataframe. Probably end up streamlining / revising this. — input_summary_","text":"Generates input summary based FisheryScalers dataframe. Probably end streamlining / revising .","code":""},{"path":"https://framverse.github.io/framrsquared/reference/input_summary_.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Generates an input summary based on a FisheryScalers dataframe. Probably end up streamlining / revising this. — input_summary_","text":"","code":"input_summary_(.data, run_id)"},{"path":"https://framverse.github.io/framrsquared/reference/input_summary_.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Generates an input summary based on a FisheryScalers dataframe. Probably end up streamlining / revising this. — input_summary_","text":".data FisheryFishery scalers dataframe run_id Run ID number","code":""},{"path":"https://framverse.github.io/framrsquared/reference/input_summary_.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Generates an input summary based on a FisheryScalers dataframe. Probably end up streamlining / revising this. — input_summary_","text":"","code":"if (FALSE) fishery_scalers_dataframe |> input_summary() # \\dontrun{}"},{"path":"https://framverse.github.io/framrsquared/reference/make_impacts_per_catch_heatmap.html","id":null,"dir":"Reference","previous_headings":"","what":"Make plots to show the amount of landed catch_per_impact — make_impacts_per_catch_heatmap","title":"Make plots to show the amount of landed catch_per_impact — make_impacts_per_catch_heatmap","text":"Identify much reduction landed catch fishery needed reduce impacts focal stock 1 fish.","code":""},{"path":"https://framverse.github.io/framrsquared/reference/make_impacts_per_catch_heatmap.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Make plots to show the amount of landed catch_per_impact — make_impacts_per_catch_heatmap","text":"","code":"make_impacts_per_catch_heatmap(fram_db, run_id, stock_id)"},{"path":"https://framverse.github.io/framrsquared/reference/make_impacts_per_catch_heatmap.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Make plots to show the amount of landed catch_per_impact — make_impacts_per_catch_heatmap","text":"fram_db fram database connection run_id run_id interest stock_id stock_id interest.","code":""},{"path":"https://framverse.github.io/framrsquared/reference/make_impacts_per_catch_heatmap.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Make plots to show the amount of landed catch_per_impact — make_impacts_per_catch_heatmap","text":"ggplot object","code":""},{"path":"https://framverse.github.io/framrsquared/reference/make_impacts_per_catch_heatmap.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Make plots to show the amount of landed catch_per_impact — make_impacts_per_catch_heatmap","text":"","code":"if (FALSE) { # \\dontrun{ path = \"FRAM compilations - readonly/2024-Pre-Season-Chinook-DB/2024 Pre-Season Chinook DB.mdb\" run_id = 132 stock_id = 3 make_impacts_per_catch_heatmap(path,                                run_id = 132,                                stock_id = 5) } # }"},{"path":"https://framverse.github.io/framrsquared/reference/management_week.html","id":null,"dir":"Reference","previous_headings":"","what":"Vectorized approach to calculating the management week, returns an integer — management_week","title":"Vectorized approach to calculating the management week, returns an integer — management_week","text":"Vectorized approach calculating management week, returns integer","code":""},{"path":"https://framverse.github.io/framrsquared/reference/management_week.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Vectorized approach to calculating the management week, returns an integer — management_week","text":"","code":"management_week(date)"},{"path":"https://framverse.github.io/framrsquared/reference/management_week.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Vectorized approach to calculating the management week, returns an integer — management_week","text":"date column dates","code":""},{"path":"https://framverse.github.io/framrsquared/reference/management_week.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Vectorized approach to calculating the management week, returns an integer — management_week","text":"","code":"if (FALSE) { # \\dontrun{ data_fram |>   mutate(mngmt_week = management_week(date_field)) } # }"},{"path":"https://framverse.github.io/framrsquared/reference/mortality_scalers.html","id":null,"dir":"Reference","previous_headings":"","what":"Guestimate the impact on a particular stock by multiplying its mortalities by the stock_mortality_ratio produced by these functions. — mortality_scalers","title":"Guestimate the impact on a particular stock by multiplying its mortalities by the stock_mortality_ratio produced by these functions. — mortality_scalers","text":"Guestimate impact particular stock multiplying mortalities stock_mortality_ratio produced functions.","code":""},{"path":"https://framverse.github.io/framrsquared/reference/mortality_scalers.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Guestimate the impact on a particular stock by multiplying its mortalities by the stock_mortality_ratio produced by these functions. — mortality_scalers","text":"","code":"mortality_scalers(fram_db, run_id, stock_id)"},{"path":"https://framverse.github.io/framrsquared/reference/mortality_scalers.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Guestimate the impact on a particular stock by multiplying its mortalities by the stock_mortality_ratio produced by these functions. — mortality_scalers","text":"fram_db FRAM database object run_id Run ID stock_id focal stock stocks","code":""},{"path":"https://framverse.github.io/framrsquared/reference/mortality_scalers.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Guestimate the impact on a particular stock by multiplying its mortalities by the stock_mortality_ratio produced by these functions. — mortality_scalers","text":"","code":"if (FALSE) fram_db |> mortality_scalers(run_id = 101, stock_id = c(17:18)) # \\dontrun{}"},{"path":"https://framverse.github.io/framrsquared/reference/msf_encounters.html","id":null,"dir":"Reference","previous_headings":"","what":"Produces the MSF screen report numbers for encounters. Returns different format depending database. — msf_encounters","title":"Produces the MSF screen report numbers for encounters. Returns different format depending database. — msf_encounters","text":"Produces MSF screen report numbers encounters. Returns different format depending database.","code":""},{"path":"https://framverse.github.io/framrsquared/reference/msf_encounters.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Produces the MSF screen report numbers for encounters. Returns different format depending database. — msf_encounters","text":"","code":"msf_encounters(fram_db, run_id = NULL)"},{"path":"https://framverse.github.io/framrsquared/reference/msf_encounters.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Produces the MSF screen report numbers for encounters. Returns different format depending database. — msf_encounters","text":"fram_db FRAM database object run_id Run ID","code":""},{"path":"https://framverse.github.io/framrsquared/reference/msf_encounters.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Produces the MSF screen report numbers for encounters. Returns different format depending database. — msf_encounters","text":"","code":"if (FALSE) fram_db |> msf_encounters(run_id = 101) # \\dontrun{}"},{"path":"https://framverse.github.io/framrsquared/reference/msf_encounters_chinook_.html","id":null,"dir":"Reference","previous_headings":"","what":"Returns a tibble matching the MSF screen report encounters for Chinook. This is specific for Chinook and in most cases msf_encounters() is preferable. — msf_encounters_chinook_","title":"Returns a tibble matching the MSF screen report encounters for Chinook. This is specific for Chinook and in most cases msf_encounters() is preferable. — msf_encounters_chinook_","text":"Returns tibble matching MSF screen report encounters Chinook. specific Chinook cases msf_encounters() preferable.","code":""},{"path":"https://framverse.github.io/framrsquared/reference/msf_encounters_chinook_.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Returns a tibble matching the MSF screen report encounters for Chinook. This is specific for Chinook and in most cases msf_encounters() is preferable. — msf_encounters_chinook_","text":"","code":"msf_encounters_chinook_(fram_db)"},{"path":"https://framverse.github.io/framrsquared/reference/msf_encounters_chinook_.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Returns a tibble matching the MSF screen report encounters for Chinook. This is specific for Chinook and in most cases msf_encounters() is preferable. — msf_encounters_chinook_","text":"fram_db FRAM database object","code":""},{"path":"https://framverse.github.io/framrsquared/reference/msf_encounters_chinook_.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Returns a tibble matching the MSF screen report encounters for Chinook. This is specific for Chinook and in most cases msf_encounters() is preferable. — msf_encounters_chinook_","text":"","code":"if (FALSE) fram_db |> msf_encounters_chinook_(run_id = 101) # \\dontrun{}"},{"path":"https://framverse.github.io/framrsquared/reference/msf_encounters_coho_.html","id":null,"dir":"Reference","previous_headings":"","what":"Returns a tibble matching the MSF screen report encounters for Coho This is specific for Coho and in most cases msf_encounters() is preferable. — msf_encounters_coho_","title":"Returns a tibble matching the MSF screen report encounters for Coho This is specific for Coho and in most cases msf_encounters() is preferable. — msf_encounters_coho_","text":"Returns tibble matching MSF screen report encounters Coho specific Coho cases msf_encounters() preferable.","code":""},{"path":"https://framverse.github.io/framrsquared/reference/msf_encounters_coho_.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Returns a tibble matching the MSF screen report encounters for Coho This is specific for Coho and in most cases msf_encounters() is preferable. — msf_encounters_coho_","text":"","code":"msf_encounters_coho_(fram_db)"},{"path":"https://framverse.github.io/framrsquared/reference/msf_encounters_coho_.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Returns a tibble matching the MSF screen report encounters for Coho This is specific for Coho and in most cases msf_encounters() is preferable. — msf_encounters_coho_","text":"fram_db FRAM database object","code":""},{"path":"https://framverse.github.io/framrsquared/reference/msf_encounters_coho_.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Returns a tibble matching the MSF screen report encounters for Coho This is specific for Coho and in most cases msf_encounters() is preferable. — msf_encounters_coho_","text":"","code":"if (FALSE) fram_db |> msf_encounters_coho_() # \\dontrun{}"},{"path":"https://framverse.github.io/framrsquared/reference/msf_landed_catch.html","id":null,"dir":"Reference","previous_headings":"","what":"Produces the MSF screen report numbers for landed catch. Returns different format depending database. — msf_landed_catch","title":"Produces the MSF screen report numbers for landed catch. Returns different format depending database. — msf_landed_catch","text":"Produces MSF screen report numbers landed catch. Returns different format depending database.","code":""},{"path":"https://framverse.github.io/framrsquared/reference/msf_landed_catch.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Produces the MSF screen report numbers for landed catch. Returns different format depending database. — msf_landed_catch","text":"","code":"msf_landed_catch(fram_db, run_id = NULL)"},{"path":"https://framverse.github.io/framrsquared/reference/msf_landed_catch.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Produces the MSF screen report numbers for landed catch. Returns different format depending database. — msf_landed_catch","text":"fram_db FRAM database object run_id Run ID","code":""},{"path":"https://framverse.github.io/framrsquared/reference/msf_landed_catch.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Produces the MSF screen report numbers for landed catch. Returns different format depending database. — msf_landed_catch","text":"","code":"if (FALSE) fram_db |> msf_landed_catch(run_id = 101) # \\dontrun{}"},{"path":"https://framverse.github.io/framrsquared/reference/msf_landed_catch_chinook_.html","id":null,"dir":"Reference","previous_headings":"","what":"Returns a tibble matching the MSF screen report landed catch for Chinook. This is specific for Chinook and in most cases msf_landed_catch() is preferable. — msf_landed_catch_chinook_","title":"Returns a tibble matching the MSF screen report landed catch for Chinook. This is specific for Chinook and in most cases msf_landed_catch() is preferable. — msf_landed_catch_chinook_","text":"Returns tibble matching MSF screen report landed catch Chinook. specific Chinook cases msf_landed_catch() preferable.","code":""},{"path":"https://framverse.github.io/framrsquared/reference/msf_landed_catch_chinook_.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Returns a tibble matching the MSF screen report landed catch for Chinook. This is specific for Chinook and in most cases msf_landed_catch() is preferable. — msf_landed_catch_chinook_","text":"","code":"msf_landed_catch_chinook_(fram_db)"},{"path":"https://framverse.github.io/framrsquared/reference/msf_landed_catch_chinook_.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Returns a tibble matching the MSF screen report landed catch for Chinook. This is specific for Chinook and in most cases msf_landed_catch() is preferable. — msf_landed_catch_chinook_","text":"fram_db FRAM database object","code":""},{"path":"https://framverse.github.io/framrsquared/reference/msf_landed_catch_chinook_.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Returns a tibble matching the MSF screen report landed catch for Chinook. This is specific for Chinook and in most cases msf_landed_catch() is preferable. — msf_landed_catch_chinook_","text":"","code":"if (FALSE) fram_db |> msf_landed_catch_chinook_(run_id = 101) # \\dontrun{}"},{"path":"https://framverse.github.io/framrsquared/reference/msf_landed_catch_coho_.html","id":null,"dir":"Reference","previous_headings":"","what":"Returns a tibble matching the MSF screen report landed catch for Coho This is specific for Coho and in most cases msf_landed_catch() is preferable. — msf_landed_catch_coho_","title":"Returns a tibble matching the MSF screen report landed catch for Coho This is specific for Coho and in most cases msf_landed_catch() is preferable. — msf_landed_catch_coho_","text":"Returns tibble matching MSF screen report landed catch Coho specific Coho cases msf_landed_catch() preferable.","code":""},{"path":"https://framverse.github.io/framrsquared/reference/msf_landed_catch_coho_.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Returns a tibble matching the MSF screen report landed catch for Coho This is specific for Coho and in most cases msf_landed_catch() is preferable. — msf_landed_catch_coho_","text":"","code":"msf_landed_catch_coho_(fram_db)"},{"path":"https://framverse.github.io/framrsquared/reference/msf_landed_catch_coho_.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Returns a tibble matching the MSF screen report landed catch for Coho This is specific for Coho and in most cases msf_landed_catch() is preferable. — msf_landed_catch_coho_","text":"fram_db FRAM database object","code":""},{"path":"https://framverse.github.io/framrsquared/reference/msf_landed_catch_coho_.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Returns a tibble matching the MSF screen report landed catch for Coho This is specific for Coho and in most cases msf_landed_catch() is preferable. — msf_landed_catch_coho_","text":"","code":"if (FALSE) fram_db |> msf_landed_catch_coho_() # \\dontrun{}"},{"path":"https://framverse.github.io/framrsquared/reference/msf_mortalities.html","id":null,"dir":"Reference","previous_headings":"","what":"Produces the MSF screen report numbers for mortalities. Returns different format depending database. — msf_mortalities","title":"Produces the MSF screen report numbers for mortalities. Returns different format depending database. — msf_mortalities","text":"Produces MSF screen report numbers mortalities. Returns different format depending database.","code":""},{"path":"https://framverse.github.io/framrsquared/reference/msf_mortalities.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Produces the MSF screen report numbers for mortalities. Returns different format depending database. — msf_mortalities","text":"","code":"msf_mortalities(fram_db, run_id = NULL)"},{"path":"https://framverse.github.io/framrsquared/reference/msf_mortalities.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Produces the MSF screen report numbers for mortalities. Returns different format depending database. — msf_mortalities","text":"fram_db FRAM database object run_id Run ID","code":""},{"path":"https://framverse.github.io/framrsquared/reference/msf_mortalities.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Produces the MSF screen report numbers for mortalities. Returns different format depending database. — msf_mortalities","text":"","code":"if (FALSE) fram_db |> msf_mortalities_coho_(run_id = 101) # \\dontrun{}"},{"path":"https://framverse.github.io/framrsquared/reference/msf_mortalities_chinook_.html","id":null,"dir":"Reference","previous_headings":"","what":"Returns a tibble matching the MSF screen report mortalities for Chinook. This is specific for Chinook and in most cases msf_mortalities() is preferable. — msf_mortalities_chinook_","title":"Returns a tibble matching the MSF screen report mortalities for Chinook. This is specific for Chinook and in most cases msf_mortalities() is preferable. — msf_mortalities_chinook_","text":"Returns tibble matching MSF screen report mortalities Chinook. specific Chinook cases msf_mortalities() preferable.","code":""},{"path":"https://framverse.github.io/framrsquared/reference/msf_mortalities_chinook_.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Returns a tibble matching the MSF screen report mortalities for Chinook. This is specific for Chinook and in most cases msf_mortalities() is preferable. — msf_mortalities_chinook_","text":"","code":"msf_mortalities_chinook_(fram_db)"},{"path":"https://framverse.github.io/framrsquared/reference/msf_mortalities_chinook_.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Returns a tibble matching the MSF screen report mortalities for Chinook. This is specific for Chinook and in most cases msf_mortalities() is preferable. — msf_mortalities_chinook_","text":"fram_db FRAM database object","code":""},{"path":"https://framverse.github.io/framrsquared/reference/msf_mortalities_chinook_.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Returns a tibble matching the MSF screen report mortalities for Chinook. This is specific for Chinook and in most cases msf_mortalities() is preferable. — msf_mortalities_chinook_","text":"","code":"if (FALSE) fram_db |> msf_mortalities_chinook_(run_id = 101) # \\dontrun{}"},{"path":"https://framverse.github.io/framrsquared/reference/msf_mortalities_coho_.html","id":null,"dir":"Reference","previous_headings":"","what":"Returns a tibble matching the MSF screen report mortalities for Coho This is specific for Coho and in most cases msf_mortalities() is preferable. — msf_mortalities_coho_","title":"Returns a tibble matching the MSF screen report mortalities for Coho This is specific for Coho and in most cases msf_mortalities() is preferable. — msf_mortalities_coho_","text":"Returns tibble matching MSF screen report mortalities Coho specific Coho cases msf_mortalities() preferable.","code":""},{"path":"https://framverse.github.io/framrsquared/reference/msf_mortalities_coho_.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Returns a tibble matching the MSF screen report mortalities for Coho This is specific for Coho and in most cases msf_mortalities() is preferable. — msf_mortalities_coho_","text":"","code":"msf_mortalities_coho_(fram_db)"},{"path":"https://framverse.github.io/framrsquared/reference/msf_mortalities_coho_.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Returns a tibble matching the MSF screen report mortalities for Coho This is specific for Coho and in most cases msf_mortalities() is preferable. — msf_mortalities_coho_","text":"fram_db FRAM database object","code":""},{"path":"https://framverse.github.io/framrsquared/reference/msf_mortalities_coho_.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Returns a tibble matching the MSF screen report mortalities for Coho This is specific for Coho and in most cases msf_mortalities() is preferable. — msf_mortalities_coho_","text":"","code":"if (FALSE) fram_db |> msf_mortalities_coho_() # \\dontrun{}"},{"path":"https://framverse.github.io/framrsquared/reference/msp_mortality.html","id":null,"dir":"Reference","previous_headings":"","what":"Expand Chinook mortality table using Model-Stock Proportion — msp_mortality","title":"Expand Chinook mortality table using Model-Stock Proportion — msp_mortality","text":"See https://framverse.github.io/fram_doc/calcs_data_chin.html#46_Model-Stock_Proportion.","code":""},{"path":"https://framverse.github.io/framrsquared/reference/msp_mortality.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Expand Chinook mortality table using Model-Stock Proportion — msp_mortality","text":"","code":"msp_mortality(fram_db, run_id = NULL)"},{"path":"https://framverse.github.io/framrsquared/reference/msp_mortality.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Expand Chinook mortality table using Model-Stock Proportion — msp_mortality","text":"fram_db FRAM database object run_id Run ID (optional)","code":""},{"path":"https://framverse.github.io/framrsquared/reference/msp_mortality.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Expand Chinook mortality table using Model-Stock Proportion — msp_mortality","text":"Mortality table mortality values expanded msp","code":""},{"path":"https://framverse.github.io/framrsquared/reference/msp_mortality.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Expand Chinook mortality table using Model-Stock Proportion — msp_mortality","text":"","code":"if (FALSE) { # \\dontrun{ fram_db |> msp_mortality(run_id = 132) } # }"},{"path":"https://framverse.github.io/framrsquared/reference/plot_stock_mortality.html","id":null,"dir":"Reference","previous_headings":"","what":"Creates an ordered bar chart with the top number of mortalities per fishery. — plot_stock_mortality","title":"Creates an ordered bar chart with the top number of mortalities per fishery. — plot_stock_mortality","text":"Creates ordered bar chart top number mortalities per fishery.","code":""},{"path":"https://framverse.github.io/framrsquared/reference/plot_stock_mortality.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Creates an ordered bar chart with the top number of mortalities per fishery. — plot_stock_mortality","text":"","code":"plot_stock_mortality(   fram_db,   run_id,   stock_id,   top_n = 10,   filters_list = NULL,   msp = TRUE )"},{"path":"https://framverse.github.io/framrsquared/reference/plot_stock_mortality.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Creates an ordered bar chart with the top number of mortalities per fishery. — plot_stock_mortality","text":"fram_db fram database object, supplied connect_fram_db run_id numeric, RunID stock_id numeric, ID focal stock top_n numeric, Number fisheries display filters_list list framrsquared filter functions apply plotting. msp Use Model Stock Proportion expansion? Default true","code":""},{"path":"https://framverse.github.io/framrsquared/reference/plot_stock_mortality.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Creates an ordered bar chart with the top number of mortalities per fishery. — plot_stock_mortality","text":"","code":"if (FALSE) { # \\dontrun{ fram_db |> plot_stock_mortality(run_id = 132, stock_id = 17) fram_db |> plot_stock_mortality(run_id = 132, stock_id = 17,         filters_list = list(filter_wa, filter_marine)) } # }"},{"path":"https://framverse.github.io/framrsquared/reference/plot_stock_mortality_time_step.html","id":null,"dir":"Reference","previous_headings":"","what":"Creates an ordered bar chart with the top number of mortalities per fishery and time step. — plot_stock_mortality_time_step","title":"Creates an ordered bar chart with the top number of mortalities per fishery and time step. — plot_stock_mortality_time_step","text":"Creates ordered bar chart top number mortalities per fishery time step.","code":""},{"path":"https://framverse.github.io/framrsquared/reference/plot_stock_mortality_time_step.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Creates an ordered bar chart with the top number of mortalities per fishery and time step. — plot_stock_mortality_time_step","text":"","code":"plot_stock_mortality_time_step(   fram_db,   run_id,   stock_id,   top_n = 10,   filters_list = NULL,   msp = TRUE )"},{"path":"https://framverse.github.io/framrsquared/reference/plot_stock_mortality_time_step.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Creates an ordered bar chart with the top number of mortalities per fishery and time step. — plot_stock_mortality_time_step","text":"fram_db fram database object, supplied connect_fram_db run_id numeric, RunID stock_id numeric, ID focal stock top_n numeric, Number fisheries display filters_list list framrsquared filter functions apply plotting. msp Use Model Stock Proportion expansion? Default true","code":""},{"path":"https://framverse.github.io/framrsquared/reference/plot_stock_mortality_time_step.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Creates an ordered bar chart with the top number of mortalities per fishery and time step. — plot_stock_mortality_time_step","text":"","code":"if (FALSE) { # \\dontrun{ fram_db |> stock_mortality_time_step(run_id = 132, stock_id = 17) } # }"},{"path":"https://framverse.github.io/framrsquared/reference/population_statistics.html","id":null,"dir":"Reference","previous_headings":"","what":"Returns a tibble matching the Population Statistics screen. — population_statistics","title":"Returns a tibble matching the Population Statistics screen. — population_statistics","text":"Returns tibble matching Population Statistics screen.","code":""},{"path":"https://framverse.github.io/framrsquared/reference/population_statistics.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Returns a tibble matching the Population Statistics screen. — population_statistics","text":"","code":"population_statistics(fram_db, run_id = NULL)"},{"path":"https://framverse.github.io/framrsquared/reference/population_statistics.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Returns a tibble matching the Population Statistics screen. — population_statistics","text":"fram_db FRAM database object run_id Run ID","code":""},{"path":"https://framverse.github.io/framrsquared/reference/population_statistics.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Returns a tibble matching the Population Statistics screen. — population_statistics","text":"","code":"if (FALSE) fram_db |> population_statistics(run_id = 101) # \\dontrun{}"},{"path":"https://framverse.github.io/framrsquared/reference/post_season_abundance.html","id":null,"dir":"Reference","previous_headings":"","what":"Generates post-season January age 3 abundances by stock from post-season databases. Used for forecasting. — post_season_abundance","title":"Generates post-season January age 3 abundances by stock from post-season databases. Used for forecasting. — post_season_abundance","text":"Generates post-season January age 3 abundances stock post-season databases. Used forecasting.","code":""},{"path":"https://framverse.github.io/framrsquared/reference/post_season_abundance.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Generates post-season January age 3 abundances by stock from post-season databases. Used for forecasting. — post_season_abundance","text":"","code":"post_season_abundance(fram_db, units = c(\"ja3\", \"oa3\"))"},{"path":"https://framverse.github.io/framrsquared/reference/post_season_abundance.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Generates post-season January age 3 abundances by stock from post-season databases. Used for forecasting. — post_season_abundance","text":"fram_db FRAM database object units Default January Age 3 'ja3', optional ocean age 3 'oa3'","code":""},{"path":"https://framverse.github.io/framrsquared/reference/post_season_abundance.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Generates post-season January age 3 abundances by stock from post-season databases. Used for forecasting. — post_season_abundance","text":"","code":"if (FALSE) framdb |> post_season_abundance() # \\dontrun{}"},{"path":"https://framverse.github.io/framrsquared/reference/provide_table_names.html","id":null,"dir":"Reference","previous_headings":"","what":"List names of FRAM table — provide_table_names","title":"List names of FRAM table — provide_table_names","text":"Provides list FRAm database names, typically useful internal functions.","code":""},{"path":"https://framverse.github.io/framrsquared/reference/provide_table_names.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"List names of FRAM table — provide_table_names","text":"","code":"provide_table_names(is_full = TRUE)"},{"path":"https://framverse.github.io/framrsquared/reference/provide_table_names.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"List names of FRAM table — provide_table_names","text":"is_full Logical. Provide names full FRAM database (TRUE) model transfer (FALSE)?","code":""},{"path":"https://framverse.github.io/framrsquared/reference/provide_table_names.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"List names of FRAM table — provide_table_names","text":"Character string names FRAM tables","code":""},{"path":"https://framverse.github.io/framrsquared/reference/provide_table_names.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"List names of FRAM table — provide_table_names","text":"","code":"provide_table_names(is_full = FALSE) #>  [1] \"BackwardsFRAM\"          \"BaseID\"                 \"Cohort\"                 #>  [4] \"Escapement\"             \"FisheryMortality\"       \"FisheryScalers\"         #>  [7] \"Mortality\"              \"NonRetention\"           \"PSCMaxER\"               #> [10] \"RunID\"                  \"SizeLimits\"             \"SLRatio\"                #> [13] \"StockFisheryRateScaler\" \"StockRecruit\"           \"TAAETRSList\""},{"path":"https://framverse.github.io/framrsquared/reference/remove_run.html","id":null,"dir":"Reference","previous_headings":"","what":"Removes a run in a FRAM database — remove_run","title":"Removes a run in a FRAM database — remove_run","text":"Removes run FRAM database","code":""},{"path":"https://framverse.github.io/framrsquared/reference/remove_run.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Removes a run in a FRAM database — remove_run","text":"","code":"remove_run(fram_db, run_id)"},{"path":"https://framverse.github.io/framrsquared/reference/remove_run.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Removes a run in a FRAM database — remove_run","text":"fram_db FRAM database object run_id FRAM run ID deleted","code":""},{"path":"https://framverse.github.io/framrsquared/reference/remove_run.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Removes a run in a FRAM database — remove_run","text":"","code":"if (FALSE) fram_db |> delete_run(run_id = 132) # \\dontrun{}"},{"path":"https://framverse.github.io/framrsquared/reference/run_info.html","id":null,"dir":"Reference","previous_headings":"","what":"Provides a print out of Run ID information — run_info","title":"Provides a print out of Run ID information — run_info","text":"Provides print Run ID information","code":""},{"path":"https://framverse.github.io/framrsquared/reference/run_info.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Provides a print out of Run ID information — run_info","text":"","code":"run_info(fram_db, run_id)"},{"path":"https://framverse.github.io/framrsquared/reference/run_info.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Provides a print out of Run ID information — run_info","text":"fram_db FRAM database object run_id FRAM run ID","code":""},{"path":"https://framverse.github.io/framrsquared/reference/run_info.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Provides a print out of Run ID information — run_info","text":"","code":"if (FALSE) fram_db |> run_info(run_id = 132) # \\dontrun{}"},{"path":"https://framverse.github.io/framrsquared/reference/scalers_flag_translate.html","id":null,"dir":"Reference","previous_headings":"","what":"Provides English translation of numeric scalers flags — scalers_flag_translate","title":"Provides English translation of numeric scalers flags — scalers_flag_translate","text":"Provides English translation numeric scalers flags","code":""},{"path":"https://framverse.github.io/framrsquared/reference/scalers_flag_translate.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Provides English translation of numeric scalers flags — scalers_flag_translate","text":"","code":"scalers_flag_translate(vec)"},{"path":"https://framverse.github.io/framrsquared/reference/scalers_flag_translate.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Provides English translation of numeric scalers flags — scalers_flag_translate","text":"vec vector flags","code":""},{"path":"https://framverse.github.io/framrsquared/reference/scalers_flag_translate.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Provides English translation of numeric scalers flags — scalers_flag_translate","text":"","code":"if (FALSE) scalers_flag_translate(sample(c(1, 2, 7, 8, 17, 18, 27, 28), 10, replace = T)) # \\dontrun{}"},{"path":"https://framverse.github.io/framrsquared/reference/standardize_species.html","id":null,"dir":"Reference","previous_headings":"","what":"Allow multiple species identifiers — standardize_species","title":"Allow multiple species identifiers — standardize_species","text":"framrsquared functions written around fram database species labels, \"COHO\" \"CHINOOK\". function translates alternate designations (lowercase, \"chin\" \"chinook\") two forms.","code":""},{"path":"https://framverse.github.io/framrsquared/reference/standardize_species.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Allow multiple species identifiers — standardize_species","text":"","code":"standardize_species(species)"},{"path":"https://framverse.github.io/framrsquared/reference/standardize_species.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Allow multiple species identifiers — standardize_species","text":"species Character atomic, either \"COHO\", \"CHIN\", \"CHINOOK\", capitalization","code":""},{"path":"https://framverse.github.io/framrsquared/reference/standardize_species.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Allow multiple species identifiers — standardize_species","text":"Character atomic, either \"COHO\" \"CHINOOK\"","code":""},{"path":"https://framverse.github.io/framrsquared/reference/statistical_week.html","id":null,"dir":"Reference","previous_headings":"","what":"Vectorized approach to calculating the statistical week, returns an integer — statistical_week","title":"Vectorized approach to calculating the statistical week, returns an integer — statistical_week","text":"Statistical weeks start mondays, first statistical week year starts first monday year. (Contrast management weeks start Sundays).","code":""},{"path":"https://framverse.github.io/framrsquared/reference/statistical_week.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Vectorized approach to calculating the statistical week, returns an integer — statistical_week","text":"","code":"statistical_week(date)"},{"path":"https://framverse.github.io/framrsquared/reference/statistical_week.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Vectorized approach to calculating the statistical week, returns an integer — statistical_week","text":"date vector dates","code":""},{"path":"https://framverse.github.io/framrsquared/reference/statistical_week.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Vectorized approach to calculating the statistical week, returns an integer — statistical_week","text":"","code":"if (FALSE) { # \\dontrun{ data_fram |>   mutate(mngmt_week = statistical_week(date_field)) } # }"},{"path":"https://framverse.github.io/framrsquared/reference/stock_age_checker.html","id":null,"dir":"Reference","previous_headings":"","what":"Helper function to check that all stock x age combinations are present — stock_age_checker","title":"Helper function to check that all stock x age combinations are present — stock_age_checker","text":"#' Intended internal use, makes assumptions inputs.","code":""},{"path":"https://framverse.github.io/framrsquared/reference/stock_age_checker.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Helper function to check that all stock x age combinations are present — stock_age_checker","text":"","code":"stock_age_checker(table_name, NumStk, old_stockcount, df, min_age, max_age)"},{"path":"https://framverse.github.io/framrsquared/reference/stock_age_checker.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Helper function to check that all stock x age combinations are present — stock_age_checker","text":"table_name Character table name, informative messages. NumStk Maximum number stock, pulled BaseID table old_stockcount Number stock previous FRAM baseperiod. looks problems StockID > number. df Dataframe check. Must columns \"stock_id\" \"age\" (names relevant columns framrsquared::fetch_table). min_age Minimum age modeled. min_age baseid_df. max_age Maximum age modeled.  max_age baseid_df.","code":""},{"path":"https://framverse.github.io/framrsquared/reference/stock_age_checker.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Helper function to check that all stock x age combinations are present — stock_age_checker","text":"numeri; 0 warning, 1 warning.","code":""},{"path":"https://framverse.github.io/framrsquared/reference/stock_check_helper.html","id":null,"dir":"Reference","previous_headings":"","what":"Helper function to check that stock id make sense — stock_check_helper","title":"Helper function to check that stock id make sense — stock_check_helper","text":"thorough checking stock_id_comp. Checks number stock IDs makes sense given NumStk, Stock IDs sequential (sense NumStk = n, every integer n represented). Optionally, can check stock ID unique.","code":""},{"path":"https://framverse.github.io/framrsquared/reference/stock_check_helper.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Helper function to check that stock id make sense — stock_check_helper","text":"","code":"stock_check_helper(table_name, NumStk, stock_vec, uniques_only = FALSE)"},{"path":"https://framverse.github.io/framrsquared/reference/stock_check_helper.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Helper function to check that stock id make sense — stock_check_helper","text":"table_name Character table name, informative messages. NumStk Maximum number stock, pulled BaseID table stock_vec vector stock ids check. Presumably column fetched table. uniques_only want warnings duplicats StockIDs? Useful tables like Stock Growth one entry per stock. Logical, default = FALSE.","code":""},{"path":"https://framverse.github.io/framrsquared/reference/stock_check_helper.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Helper function to check that stock id make sense — stock_check_helper","text":"Numeric, returning number warnings detected.","code":""},{"path":"https://framverse.github.io/framrsquared/reference/stock_fate.html","id":null,"dir":"Reference","previous_headings":"","what":" Summarizes the three true outcomes of a stocks abundance, where it dies to fishery related mortality, natural mortality, or reaches some sort of escapement. When run against the coho database spawning escapement will be displayed, when run against the Chinook database escapement to the river will be dislpayed along with recruits to the next year 'age_up' — stock_fate","title":" Summarizes the three true outcomes of a stocks abundance, where it dies to fishery related mortality, natural mortality, or reaches some sort of escapement. When run against the coho database spawning escapement will be displayed, when run against the Chinook database escapement to the river will be dislpayed along with recruits to the next year 'age_up' — stock_fate","text":"Summarizes three true outcomes stocks abundance, dies fishery related mortality, natural mortality, reaches sort escapement. run coho database spawning escapement displayed, run Chinook database escapement river dislpayed along recruits next year 'age_up'","code":""},{"path":"https://framverse.github.io/framrsquared/reference/stock_fate.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":" Summarizes the three true outcomes of a stocks abundance, where it dies to fishery related mortality, natural mortality, or reaches some sort of escapement. When run against the coho database spawning escapement will be displayed, when run against the Chinook database escapement to the river will be dislpayed along with recruits to the next year 'age_up' — stock_fate","text":"","code":"stock_fate(fram_db, run_id = NULL, units = c(\"fish\", \"percentage\"))"},{"path":"https://framverse.github.io/framrsquared/reference/stock_fate.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":" Summarizes the three true outcomes of a stocks abundance, where it dies to fishery related mortality, natural mortality, or reaches some sort of escapement. When run against the coho database spawning escapement will be displayed, when run against the Chinook database escapement to the river will be dislpayed along with recruits to the next year 'age_up' — stock_fate","text":"fram_db FRAM database object run_id Run ID (optional) units 'fish' 'percentage'. Percentage proportion starting adbundace","code":""},{"path":"https://framverse.github.io/framrsquared/reference/stock_fate.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":" Summarizes the three true outcomes of a stocks abundance, where it dies to fishery related mortality, natural mortality, or reaches some sort of escapement. When run against the coho database spawning escapement will be displayed, when run against the Chinook database escapement to the river will be dislpayed along with recruits to the next year 'age_up' — stock_fate","text":"","code":"if (FALSE) { # \\dontrun{ fram_db |> stock_fate(run_id = 145) } # }"},{"path":"https://framverse.github.io/framrsquared/reference/stock_fate_chinook.html","id":null,"dir":"Reference","previous_headings":"","what":" Chinook flavor of the stock fate function — stock_fate_chinook","title":" Chinook flavor of the stock fate function — stock_fate_chinook","text":"Chinook flavor stock fate function","code":""},{"path":"https://framverse.github.io/framrsquared/reference/stock_fate_chinook.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":" Chinook flavor of the stock fate function — stock_fate_chinook","text":"","code":"stock_fate_chinook(fram_db, run_id = NULL, units = c(\"fish\", \"percentage\"))"},{"path":"https://framverse.github.io/framrsquared/reference/stock_fate_chinook.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":" Chinook flavor of the stock fate function — stock_fate_chinook","text":"fram_db FRAM database object run_id Run ID (optional) units 'fish' 'percentage'. Percentage proportion starting adbundace","code":""},{"path":"https://framverse.github.io/framrsquared/reference/stock_fate_chinook.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":" Chinook flavor of the stock fate function — stock_fate_chinook","text":"","code":"if (FALSE) { # \\dontrun{ fram_db |> stock_fate_chinook(run_id = 145) } # }"},{"path":"https://framverse.github.io/framrsquared/reference/stock_fate_coho.html","id":null,"dir":"Reference","previous_headings":"","what":" Coho flavor of the stock fate function — stock_fate_coho","title":" Coho flavor of the stock fate function — stock_fate_coho","text":"Coho flavor stock fate function","code":""},{"path":"https://framverse.github.io/framrsquared/reference/stock_fate_coho.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":" Coho flavor of the stock fate function — stock_fate_coho","text":"","code":"stock_fate_coho(fram_db, run_id = NULL, units = c(\"fish\", \"percentage\"))"},{"path":"https://framverse.github.io/framrsquared/reference/stock_fate_coho.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":" Coho flavor of the stock fate function — stock_fate_coho","text":"fram_db FRAM database object run_id Run ID (optional) units 'fish' 'percentage'. Percentage proportion starting adbundace","code":""},{"path":"https://framverse.github.io/framrsquared/reference/stock_fate_coho.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":" Coho flavor of the stock fate function — stock_fate_coho","text":"","code":"if (FALSE) { # \\dontrun{ fram_db |> stock_fate_coho(run_id = 145) } # }"},{"path":"https://framverse.github.io/framrsquared/reference/stock_id_comp.html","id":null,"dir":"Reference","previous_headings":"","what":"Helper function to check that stock id exist in the Stock database — stock_id_comp","title":"Helper function to check that stock id exist in the Stock database — stock_id_comp","text":"Intended internal use, makes assumptions inputs.","code":""},{"path":"https://framverse.github.io/framrsquared/reference/stock_id_comp.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Helper function to check that stock id exist in the Stock database — stock_id_comp","text":"","code":"stock_id_comp(table_name, df, stock_ref)"},{"path":"https://framverse.github.io/framrsquared/reference/stock_id_comp.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Helper function to check that stock id exist in the Stock database — stock_id_comp","text":"table_name Character table name, informative messages df Dataframe stock_ref numeric vector stock IDs. stock_df$stock_id.","code":""},{"path":"https://framverse.github.io/framrsquared/reference/stock_id_comp.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Helper function to check that stock id exist in the Stock database — stock_id_comp","text":"numeric; 0 warning, 1 warning.","code":""},{"path":"https://framverse.github.io/framrsquared/reference/stock_mortality.html","id":null,"dir":"Reference","previous_headings":"","what":"Returns a tibble matching the Fishery Mortality screen. — stock_mortality","title":"Returns a tibble matching the Fishery Mortality screen. — stock_mortality","text":"Returns tibble matching Fishery Mortality screen.","code":""},{"path":"https://framverse.github.io/framrsquared/reference/stock_mortality.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Returns a tibble matching the Fishery Mortality screen. — stock_mortality","text":"","code":"stock_mortality(fram_db, run_id = NULL)"},{"path":"https://framverse.github.io/framrsquared/reference/stock_mortality.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Returns a tibble matching the Fishery Mortality screen. — stock_mortality","text":"fram_db FRAM database object run_id Run ID","code":""},{"path":"https://framverse.github.io/framrsquared/reference/stock_mortality.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Returns a tibble matching the Fishery Mortality screen. — stock_mortality","text":"","code":"if (FALSE) { # \\dontrun{ fram_db |>  stock_mortality(run_id=132) |>  filter(stock_id == 17, fishery_id == 36)  } # }"},{"path":"https://framverse.github.io/framrsquared/reference/styleguide.html","id":null,"dir":"Reference","previous_headings":"","what":"Framrsquared style guide — styleguide","title":"Framrsquared style guide — styleguide","text":"easy readability, want use consistent coding style developing code framrsquared. Presently includes () using <- assignment, (b) using snakecase variable function names. functions streamlining checking R code consistency style.","code":""},{"path":"https://framverse.github.io/framrsquared/reference/styleguide.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Framrsquared style guide — styleguide","text":"","code":"frs_stylecheck_assignment(filepath, n = Inf)  frs_stylecheck_snakecase(filepath, n = Inf)"},{"path":"https://framverse.github.io/framrsquared/reference/styleguide.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Framrsquared style guide — styleguide","text":"filepath Path R file checked n Number rows print. Default print rows, set smaller values output overwhelming.","code":""},{"path":"https://framverse.github.io/framrsquared/reference/styleguide.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Framrsquared style guide — styleguide","text":"frs_stylecheck_assignment() takes path R file, prints (returns) rows may mis-using = assignment. Note give false positives arguments defined function calls call spans multiple lines, well = signs included character strings. frs_stylecheck_snakecase takes path R file prints (returns) names variables assigned using <- include underscores. identify variables use snakecase, also give false positive matches variables single words thus need snakecase.","code":""},{"path":"https://framverse.github.io/framrsquared/reference/styleguide.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Framrsquared style guide — styleguide","text":"","code":"if (FALSE) { # \\dontrun{ frs_stylecheck_assignment(\"R/copy.R\") frs_stylecheck_snakecase(\"R/copy.R\") } # }"},{"path":"https://framverse.github.io/framrsquared/reference/truns_fisheries.html","id":null,"dir":"Reference","previous_headings":"","what":"Returns a dataframe with fisheries defined by the TRuns report driver — truns_fisheries","title":"Returns a dataframe with fisheries defined by the TRuns report driver — truns_fisheries","text":"Returns dataframe fisheries defined TRuns report driver","code":""},{"path":"https://framverse.github.io/framrsquared/reference/truns_fisheries.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Returns a dataframe with fisheries defined by the TRuns report driver — truns_fisheries","text":"","code":"truns_fisheries(fram_db)"},{"path":"https://framverse.github.io/framrsquared/reference/truns_fisheries.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Returns a dataframe with fisheries defined by the TRuns report driver — truns_fisheries","text":"fram_db FRAM database object","code":""},{"path":"https://framverse.github.io/framrsquared/reference/truns_fisheries.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Returns a dataframe with fisheries defined by the TRuns report driver — truns_fisheries","text":"","code":"if (FALSE) truns <- truns_fisheries(fram_db) # \\dontrun{}"},{"path":"https://framverse.github.io/framrsquared/reference/truns_stocks.html","id":null,"dir":"Reference","previous_headings":"","what":"Returns a dataframe with stocks defined by the TRuns report driver — truns_stocks","title":"Returns a dataframe with stocks defined by the TRuns report driver — truns_stocks","text":"Returns dataframe stocks defined TRuns report driver","code":""},{"path":"https://framverse.github.io/framrsquared/reference/truns_stocks.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Returns a dataframe with stocks defined by the TRuns report driver — truns_stocks","text":"","code":"truns_stocks(fram_db)"},{"path":"https://framverse.github.io/framrsquared/reference/truns_stocks.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Returns a dataframe with stocks defined by the TRuns report driver — truns_stocks","text":"fram_db FRAM database object","code":""},{"path":"https://framverse.github.io/framrsquared/reference/truns_stocks.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Returns a dataframe with stocks defined by the TRuns report driver — truns_stocks","text":"","code":"if (FALSE) truns <- truns_stocks(fram_db) # \\dontrun{}"},{"path":"https://framverse.github.io/framrsquared/reference/validate_fram_db.html","id":null,"dir":"Reference","previous_headings":"","what":"Convenience function to check fram_db input — validate_fram_db","title":"Convenience function to check fram_db input — validate_fram_db","text":"Convenience function check fram_db input","code":""},{"path":"https://framverse.github.io/framrsquared/reference/validate_fram_db.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Convenience function to check fram_db input — validate_fram_db","text":"","code":"validate_fram_db(   fram_db,   db_type = NULL,   db_species = NULL,   call = rlang::caller_env() )"},{"path":"https://framverse.github.io/framrsquared/reference/validate_fram_db.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Convenience function to check fram_db input — validate_fram_db","text":"fram_db FRAM database object db_type Enforcement database type 'full' 'transfer' db_species Enforcement species 'COHO' 'CHINOOK' call internal use: identify name function called function (informative error message)","code":""},{"path":"https://framverse.github.io/framrsquared/reference/validate_run_id.html","id":null,"dir":"Reference","previous_headings":"","what":"Convenience function to check run_id input — validate_run_id","title":"Convenience function to check run_id input — validate_run_id","text":"Convenience function check run_id input","code":""},{"path":"https://framverse.github.io/framrsquared/reference/validate_run_id.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Convenience function to check run_id input — validate_run_id","text":"","code":"validate_run_id(fram_db, run_id, call = rlang::caller_env())"},{"path":"https://framverse.github.io/framrsquared/reference/validate_run_id.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Convenience function to check run_id input — validate_run_id","text":"fram_db FRAM database object run_id one run_ids call internal use: identify name function called function (informative error message)","code":""},{"path":"https://framverse.github.io/framrsquared/reference/validate_species.html","id":null,"dir":"Reference","previous_headings":"","what":"Handle species identification for filters — validate_species","title":"Handle species identification for filters — validate_species","text":"Convenience function condense code. filter_* either uses \"species\" attr, optional species argument, must provide informative errors missing present mismatch.","code":""},{"path":"https://framverse.github.io/framrsquared/reference/validate_species.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Handle species identification for filters — validate_species","text":"","code":"validate_species(.data, species = NULL)"},{"path":"https://framverse.github.io/framrsquared/reference/validate_species.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Handle species identification for filters — validate_species","text":".data Dataframe species Optional, either \"COHO\" \"CHINOOK\".","code":""},{"path":"https://framverse.github.io/framrsquared/reference/validate_species.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Handle species identification for filters — validate_species","text":"Character vector \"species\"","code":""},{"path":"https://framverse.github.io/framrsquared/reference/welcome.html","id":null,"dir":"Reference","previous_headings":"","what":"Welcome message, summarizing database information — welcome","title":"Welcome message, summarizing database information — welcome","text":"Welcome message, summarizing database information","code":""},{"path":"https://framverse.github.io/framrsquared/reference/welcome.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Welcome message, summarizing database information — welcome","text":"","code":"welcome(con)"},{"path":"https://framverse.github.io/framrsquared/reference/welcome.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Welcome message, summarizing database information — welcome","text":"con FRAM database connection","code":""},{"path":"https://framverse.github.io/framrsquared/reference/welcome.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Welcome message, summarizing database information — welcome","text":"","code":"if (FALSE) welcome(con) # \\dontrun{}"}]
